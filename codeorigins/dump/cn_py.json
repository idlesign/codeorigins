{"dt": "2020-03-06 15:35", "min_followers": 10, "min_stars": 77, "users": [["User", "michaelliao", "https://avatars2.githubusercontent.com/u/470058?v=4", [["learn-python3", "https://github.com/michaelliao/learn-python3", "Learn Python 3 Sample Code", 4363, "Python"], ["sinaweibopy", "https://github.com/michaelliao/sinaweibopy", "\u65b0\u6d6a\u5fae\u535aPython SDK", 1219, "Python"], ["learn-python", "https://github.com/michaelliao/learn-python", "\u5c0f\u767d\u7684Python\u5165\u95e8\u6559\u7a0b\uff1a\u90e8\u5206\u7ae0\u8282\u6e90\u7801", 442, "Python"], ["githubpy", "https://github.com/michaelliao/githubpy", "A simple GitHub v3 API SDK for Python", 129, "Python"]]], ["User", "breakwa11", "https://avatars0.githubusercontent.com/u/8436963?v=4", [["GFWList2PAC", "https://github.com/breakwa11/GFWList2PAC", "GFWList2PAC", 190, "Python"]]], ["User", "programthink", "https://avatars2.githubusercontent.com/u/4027957?v=4", [["zhao", "https://github.com/programthink/zhao", "\u3010\u7f16\u7a0b\u968f\u60f3\u3011\u6574\u7406\u7684\u300a\u592a\u5b50\u515a\u5173\u7cfb\u7f51\u7edc\u300b\uff0c\u4e13\u95e8\u63ed\u9732\u8d75\u56fd\u7684\u6743\u8d35", 6925, "Python"]]], ["User", "lepture", "https://avatars2.githubusercontent.com/u/290496?v=4", [["mistune", "https://github.com/lepture/mistune", "A fast yet powerful Python Markdown parser with renderers and plugins.", 1703, "Python"], ["authlib", "https://github.com/lepture/authlib", "The ultimate Python library in building OAuth, OpenID Connect clients and servers. JWS,JWE,JWK,JWA,JWT included.", 1608, "Python"], ["flask-oauthlib", "https://github.com/lepture/flask-oauthlib", "YOU SHOULD USE https://github.com/lepture/authlib", 1385, "Python"], ["flask-wtf", "https://github.com/lepture/flask-wtf", "Simple integration of Flask and WTForms, including CSRF, file upload and Recaptcha integration.", 1033, "Python"], ["python-livereload", "https://github.com/lepture/python-livereload", "livereload server in python (MAINTAINERS NEEDED)", 823, "Python"], ["captcha", "https://github.com/lepture/captcha", "A captcha library that generates audio and image CAPTCHAs.", 612, "Python"], ["zerqu", "https://github.com/lepture/zerqu", "ZERQU is a content-focused API-based platform.", 168, "Python"], ["flask-weixin", "https://github.com/lepture/flask-weixin", "Weixin implementation in Flask.", 147, "Python"], ["otpauth", "https://github.com/lepture/otpauth", "Implements two-step verification of HOTP/TOTP. Also known as one time password.", 107, "Python"], ["getbook", "https://github.com/lepture/getbook", "Generate ebooks from a collection of web links.", 91, "Python"]]], ["User", "qiwsir", "https://avatars2.githubusercontent.com/u/3646955?v=4", [["algorithm", "https://github.com/qiwsir/algorithm", null, 2723, "Python"], ["ITArticles", "https://github.com/qiwsir/ITArticles", null, 1853, "Python"], ["StarterLearningPython", "https://github.com/qiwsir/StarterLearningPython", "Learning Python: from Beginner to Master. http://www.itdiffer.com", 1841, "Python"]]], ["User", "wepe", "https://avatars0.githubusercontent.com/u/9136322?v=4", [["MachineLearning", "https://github.com/wepe/MachineLearning", "Basic Machine Learning and Deep Learning", 3677, "Python"], ["O2O-Coupon-Usage-Forecast", "https://github.com/wepe/O2O-Coupon-Usage-Forecast", "1st Place Solution for O2O Coupon Usage Forecast", 1241, "Python"], ["Kaggle-Solution", "https://github.com/wepe/Kaggle-Solution", "Solution Code for Kaggle Competition", 241, "Python"], ["efficient-decision-tree-notes", "https://github.com/wepe/efficient-decision-tree-notes", "\u9ad8\u6548\u51b3\u7b56\u6811\u7b97\u6cd5\u7cfb\u5217\u7b14\u8bb0", 186, "Python"], ["TianChi-Industry4.0-Competition", "https://github.com/wepe/TianChi-Industry4.0-Competition", "1st Place Solution for TianChi-Industry4.0-Competition", 164, "Python"], ["AliTianChi", "https://github.com/wepe/AliTianChi", null, 141, "Python"], ["CaiNiao-DemandForecast-StoragePlaning", "https://github.com/wepe/CaiNiao-DemandForecast-StoragePlaning", "1st Place Season one & 6th Place Season two", 113, "Python"]]], ["User", "huangz1990", "https://avatars1.githubusercontent.com/u/536854?v=4", [["riacn-code", "https://github.com/huangz1990/riacn-code", "\u300aRedis\u5b9e\u6218\u300b\u4e00\u4e66\u7684\u76f8\u5173\u6e90\u7801\u3002", 250, "Python"]]], ["User", "521xueweihan", "https://avatars3.githubusercontent.com/u/8255800?v=4", [["HelloGitHub", "https://github.com/521xueweihan/HelloGitHub", ":octocat: Find pearls on open-source seashore \u5206\u4eab GitHub \u4e0a\u6709\u8da3\u3001\u5165\u95e8\u7ea7\u7684\u5f00\u6e90\u9879\u76ee", 27612, "Python"], ["python", "https://github.com/521xueweihan/python", "\u300a\u7b28\u65b9\u6cd5\u5b66 Python\u300b\uff08Learn Python the Hard Way\uff09\u5b66\u4e60\u7b14\u8bb0", 639, "Python"], ["hellogithub.com", "https://github.com/521xueweihan/hellogithub.com", "HelloGitHub.com \u7f51\u7ad9\u6e90\u7801", 481, "Python"]]], ["User", "phith0n", "https://avatars0.githubusercontent.com/u/5711185?v=4", [["mooder", "https://github.com/phith0n/mooder", "Mooder\u662f\u4e00\u6b3e\u5f00\u6e90\u3001\u5b89\u5168\u3001\u7b80\u6d01\u3001\u5f3a\u5927\u7684\u56e2\u961f\u5185\u90e8\u77e5\u8bc6\u5206\u4eab\u5e73\u53f0\u3002", 565, "Python"], ["python-xss-filter", "https://github.com/phith0n/python-xss-filter", "Based on native Python module HTMLParser purifier of HTML, To Clear all javascript in html", 106, "Python"], ["realworldctf", "https://github.com/phith0n/realworldctf", "My Real World CTF challenges", 100, "Python"]]], ["User", "dongweiming", "https://avatars0.githubusercontent.com/u/841395?v=4", [["web_develop", "https://github.com/dongweiming/web_develop", "\u300aPython Web\u5f00\u53d1\u5b9e\u6218\u300b\u4e66\u4e2d\u6e90\u7801", 1077, "Python"], ["weapp-zhihulive", "https://github.com/dongweiming/weapp-zhihulive", "\u77e5\u4e4eLive\u5fae\u4fe1\u5c0f\u7a0b\u5e8f & asyncio\u722c\u866b", 327, "Python"], ["Mtime", "https://github.com/dongweiming/Mtime", "A spider... ^.^", 104, "Python"]]], ["User", "wangshub", "https://avatars0.githubusercontent.com/u/20924010?v=4", [["wechat_jump_game", "https://github.com/wangshub/wechat_jump_game", "\u5fae\u4fe1\u300a\u8df3\u4e00\u8df3\u300bPython \u8f85\u52a9", 13916, "Python"], ["Douyin-Bot", "https://github.com/wangshub/Douyin-Bot", "\ud83d\ude0d Python \u6296\u97f3\u673a\u5668\u4eba\uff0c\u8bba\u5982\u4f55\u5728\u6296\u97f3\u4e0a\u627e\u5230\u6f02\u4eae\u5c0f\u59d0\u59d0\uff1f ", 6678, "Python"], ["hmpa-pi", "https://github.com/wangshub/hmpa-pi", "\ud83d\udce1 \ud83d\udd14 \u76d1\u542c\u9644\u8fd1\u7f51\u7edc Wi-Fi \u8bbe\u5907\uff0c\u901a\u8fc7\u90ae\u4ef6\u548c\u5fae\u4fe1\u8fdb\u884c\u6d88\u606f\u63a8\u9001", 153, "Python"], ["python-vad", "https://github.com/wangshub/python-vad", "\ud83d\udd08 Use python to achieve voice activity detection, this little program may be helpful for voice application", 86, "Python"]]], ["User", "ring04h", "https://avatars3.githubusercontent.com/u/92474?v=4", [["wydomain", "https://github.com/ring04h/wydomain", "to discover subdomains of your target domain", 1138, "Python"], ["weakfilescan", "https://github.com/ring04h/weakfilescan", "\u52a8\u6001\u591a\u7ebf\u7a0b\u654f\u611f\u4fe1\u606f\u6cc4\u9732\u68c0\u6d4b\u5de5\u5177", 866, "Python"], ["wyproxy", "https://github.com/ring04h/wyproxy", "proxying and recording HTTP/HTTPs/Socks5 proxy flow, save to MYSQL database. ", 456, "Python"], ["wyportmap", "https://github.com/ring04h/wyportmap", "\u76ee\u6807\u7aef\u53e3\u626b\u63cf+\u7cfb\u7edf\u670d\u52a1\u6307\u7eb9\u8bc6\u522b", 307, "Python"], ["rtcp2udp", "https://github.com/ring04h/rtcp2udp", "Reverse TCP Port to UDP Forwarding Tools", 147, "Python"], ["thorns", "https://github.com/ring04h/thorns", "thorns_project \u5206\u5e03\u5f0f\u5f02\u6b65\u961f\u5217\u7cfb\u7edf", 144, "Python"], ["dirfuzz", "https://github.com/ring04h/dirfuzz", "\u591a\u7ebf\u7a0b\u7f51\u7ad9\u76ee\u5f55\u7a77\u4e3e\u626b\u63cf", 123, "Python"]]], ["User", "Jack-Cherish", "https://avatars1.githubusercontent.com/u/16872370?v=4", [["python-spider", "https://github.com/Jack-Cherish/python-spider", ":rainbow:Python3\u7f51\u7edc\u722c\u866b\u5b9e\u6218", 10077, "Python"], ["Deep-Learning", "https://github.com/Jack-Cherish/Deep-Learning", ":computer:\u6df1\u5ea6\u5b66\u4e60\u5b9e\u6218\uff1a\u5b9e\u6218\u6559\u7a0b\u3001\u624b\u5199\u6570\u5b57\u8bc6\u522b\u3001Discuz\u9a8c\u8bc1\u7801\u8bc6\u522b", 287, "Python"]]], ["User", "fxsjy", "https://avatars3.githubusercontent.com/u/167837?v=4", [["jieba", "https://github.com/fxsjy/jieba", "\u7ed3\u5df4\u4e2d\u6587\u5206\u8bcd", 22068, "Python"], ["finalseg", "https://github.com/fxsjy/finalseg", "Chinese Words Segment Library based on HMM model", 162, "Python"], ["jiebademo", "https://github.com/fxsjy/jiebademo", "a demo site for jieba", 110, "Python"]]], ["User", "floodsung", "https://avatars0.githubusercontent.com/u/3880963?v=4", [["Deep-Learning-Papers-Reading-Roadmap", "https://github.com/floodsung/Deep-Learning-Papers-Reading-Roadmap", "Deep Learning papers reading roadmap for anyone who are eager to learn this amazing tech!", 25685, "Python"], ["LearningToCompare_FSL", "https://github.com/floodsung/LearningToCompare_FSL", "PyTorch code for CVPR 2018 paper: Learning to Compare: Relation Network for Few-Shot Learning (Few-Shot Learning part)", 674, "Python"], ["DRL-FlappyBird", "https://github.com/floodsung/DRL-FlappyBird", "Playing Flappy Bird Using Deep Reinforcement Learning (Based on Deep Q Learning DQN using Tensorflow)", 491, "Python"], ["DDPG", "https://github.com/floodsung/DDPG", "Reimplementation of DDPG(Continuous Control with Deep Reinforcement Learning) based on OpenAI Gym + Tensorflow", 377, "Python"], ["wechat_jump_end_to_end", "https://github.com/floodsung/wechat_jump_end_to_end", "Playing Wechat Jump Game with End-to-End Convolutional Neural Networks", 172, "Python"], ["DQN-Atari-Tensorflow", "https://github.com/floodsung/DQN-Atari-Tensorflow", "Simplest Version of playing Atari with Deep Q Learning  in Tensorflow", 147, "Python"]]], ["User", "brightmart", "https://avatars0.githubusercontent.com/u/19634224?v=4", [["text_classification", "https://github.com/brightmart/text_classification", "all kinds of text classification models and more with deep learning", 5920, "Python"], ["albert_zh", "https://github.com/brightmart/albert_zh", "A LITE BERT FOR SELF-SUPERVISED LEARNING OF LANGUAGE REPRESENTATIONS, \u6d77\u91cf\u4e2d\u6587\u9884\u8bad\u7ec3ALBERT\u6a21\u578b", 2198, "Python"], ["roberta_zh", "https://github.com/brightmart/roberta_zh", "RoBERTa\u4e2d\u6587\u9884\u8bad\u7ec3\u6a21\u578b: RoBERTa for Chinese ", 994, "Python"], ["bert_language_understanding", "https://github.com/brightmart/bert_language_understanding", "Pre-training of Deep Bidirectional Transformers for Language Understanding: pre-train TextCNN", 873, "Python"], ["nlu_sim", "https://github.com/brightmart/nlu_sim", "all kinds of baseline models for sentence similarity \u53e5\u5b50\u5bf9\u8bed\u4e49\u76f8\u4f3c\u5ea6\u6a21\u578b", 264, "Python"], ["ai_law", "https://github.com/brightmart/ai_law", "all kinds of baseline models for long text classificaiton( text categorization)", 224, "Python"], ["slot_filling_intent_joint_model", "https://github.com/brightmart/slot_filling_intent_joint_model", "attention based joint model for intent detection and slot filling ", 159, "Python"], ["xlnet_zh", "https://github.com/brightmart/xlnet_zh", "\u4e2d\u6587\u9884\u8bad\u7ec3XLNet\u6a21\u578b: Pre-Trained Chinese XLNet_Large", 155, "Python"], ["multi-label_classification", "https://github.com/brightmart/multi-label_classification", "transform multi-label classification as sentence pair task, with more training data and information", 100, "Python"]]], ["User", "phuslu", "https://avatars3.githubusercontent.com/u/195836?v=4", [["pybuild", "https://github.com/phuslu/pybuild", "some python build script", 120, "Python"], ["dnsproxy", "https://github.com/phuslu/dnsproxy", "DNS Proxy over TCP to avoid DNS poisoning", 101, "Python"]]], ["User", "rfyiamcool", "https://avatars1.githubusercontent.com/u/3785409?v=4", [["toproxy", "https://github.com/rfyiamcool/toproxy", "\ud83d\ude08  high performance simple tornado http proxy.", 233, "Python"], ["swift_rpc", "https://github.com/rfyiamcool/swift_rpc", ":octocat: use tornado to achieve rpc server", 82, "Python"]]], ["User", "jindongwang", "https://avatars1.githubusercontent.com/u/6158206?v=4", [["transferlearning", "https://github.com/jindongwang/transferlearning", "Everything about Transfer Learning and Domain Adaptation--\u8fc1\u79fb\u5b66\u4e60", 4835, "Python"], ["Deep-learning-activity-recognition", "https://github.com/jindongwang/Deep-learning-activity-recognition", "A tutorial for using deep learning for activity recognition (Pytorch and Tensorflow)", 118, "Python"]]], ["User", "chenjiandongx", "https://avatars2.githubusercontent.com/u/19553554?v=4", [["mzitu", "https://github.com/chenjiandongx/mzitu", "\ud83d\udc67 \u7f8e\u5973\u5199\u771f\u5957\u56fe\u722c\u866b\uff08\u4e8c\uff09", 831, "Python"], ["torrent-cli", "https://github.com/chenjiandongx/torrent-cli", "\ud83d\udd28 \u78c1\u529b\u83b7\u53d6\u5668\u547d\u4ee4\u884c\u5de5\u5177", 573, "Python"], ["magnet-dht", "https://github.com/chenjiandongx/magnet-dht", "\u270c\ufe0f Python3 DHT \u7f51\u7edc\u78c1\u529b\u79cd\u5b50\u91c7\u96c6\u5668", 559, "Python"], ["cup-size", "https://github.com/chenjiandongx/cup-size", "\ud83d\udc40 \u5173\u4e8e\u5973\u6027\u6587\u80f8\u5c3a\u7801\u7684\u6df1\u5165\u63a2\u8ba8", 536, "Python"], ["mmjpg", "https://github.com/chenjiandongx/mmjpg", "\ud83d\udc69 \u7f8e\u5973\u5199\u771f\u5957\u56fe\u722c\u866b\uff08\u4e00\uff09", 348, "Python"], ["bili-spider", "https://github.com/chenjiandongx/bili-spider", "\ud83d\udcfa B \u7ad9\u5168\u7ad9\u89c6\u9891\u4fe1\u606f\u722c\u866b", 320, "Python"], ["async-proxy-pool", "https://github.com/chenjiandongx/async-proxy-pool", "\ud83d\udd05 Python3 \u5f02\u6b65\u722c\u866b\u4ee3\u7406\u6c60", 301, "Python"], ["51job-spider", "https://github.com/chenjiandongx/51job-spider", "\ud83d\udd0e \u524d\u7a0b\u65e0\u5fe7 Python \u62db\u8058\u5c97\u4f4d\u4fe1\u606f\u722c\u53d6\u548c\u5206\u6790", 273, "Python"], ["cutecharts", "https://github.com/chenjiandongx/cutecharts", "\ud83d\udcc9 Hand drawing style charts library for Python", 248, "Python"], ["Github-spider", "https://github.com/chenjiandongx/Github-spider", "Github \u4ed3\u5e93\u53ca\u7528\u6237\u5206\u6790\u722c\u866b", 168, "Python"], ["stackoverflow-spider", "https://github.com/chenjiandongx/stackoverflow-spider", "\ud83d\udcd6 \u722c\u53d6 Stackoverflow 100\u4e07 \u6761\u95ee\u7b54\u5e76\u7b80\u5355\u5206\u6790", 155, "Python"], ["soksaccounts", "https://github.com/chenjiandongx/soksaccounts", "\ud83d\udd25 Shadowsocks \u8d26\u53f7\u722c\u866b", 135, "Python"], ["pixiv", "https://github.com/chenjiandongx/pixiv", "P \u7ad9\u975e\u4f1a\u5458\u67e5\u770b\u4eba\u6c14\u4f5c\u54c1", 97, "Python"]]], ["User", "FeeiCN", "https://avatars1.githubusercontent.com/u/1611552?v=4", [["GSIL", "https://github.com/FeeiCN/GSIL", "GitHub Sensitive Information Leakage\uff08GitHub\u654f\u611f\u4fe1\u606f\u6cc4\u9732\u76d1\u63a7\uff09", 1404, "Python"], ["ESD", "https://github.com/FeeiCN/ESD", "Enumeration sub domains(\u679a\u4e3e\u5b50\u57df\u540d)", 614, "Python"], ["dict", "https://github.com/FeeiCN/dict", "Chinese and English translation tools in the command line\uff08\u547d\u4ee4\u884c\u4e0b\u4e2d\u82f1\u6587\u7ffb\u8bd1\u5de5\u5177\uff09", 225, "Python"]]], ["User", "ChenglongChen", "https://avatars3.githubusercontent.com/u/6316171?v=4", [["tensorflow-DeepFM", "https://github.com/ChenglongChen/tensorflow-DeepFM", "Tensorflow implementation of DeepFM for CTR prediction.", 1387, "Python"], ["Kaggle_HomeDepot", "https://github.com/ChenglongChen/Kaggle_HomeDepot", "Turing Test's 3rd Place Solution for Home Depot Product Search Relevance Competition on Kaggle (https://www.kaggle.com/c/home-depot-product-search-relevance)", 430, "Python"], ["tensorflow-XNN", "https://github.com/ChenglongChen/tensorflow-XNN", "4th Place Solution for Mercari Price Suggestion Challenge on Kaggle (https://www.kaggle.com/c/mercari-price-suggestion-challenge)", 241, "Python"], ["tensorflow-DSMM", "https://github.com/ChenglongChen/tensorflow-DSMM", "Tensorflow implementations of various Deep Semantic Matching Models", 189, "Python"], ["pytorch-madrl", "https://github.com/ChenglongChen/pytorch-madrl", "PyTorch implementations of various DRL algorithms for both single agent and multi-agent.", 172, "Python"], ["tensorflow-LTR", "https://github.com/ChenglongChen/tensorflow-LTR", "Tensorflow implementations of various Learning to Rank (LTR) algorithms.", 144, "Python"]]], ["User", "lilydjwg", "https://avatars2.githubusercontent.com/u/440661?v=4", [["morerssplz", "https://github.com/lilydjwg/morerssplz", "Convert other article sources to RSS feeds", 274, "Python"], ["winterpy", "https://github.com/lilydjwg/winterpy", "My python scripts started in winter.", 193, "Python"], ["nvchecker", "https://github.com/lilydjwg/nvchecker", "New version checker for software releases", 184, "Python"], ["pssh", "https://github.com/lilydjwg/pssh", "Parallel SSH Tools", 86, "Python"]]], ["User", "tobegit3hub", "https://avatars0.githubusercontent.com/u/2715000?v=4", [["tensorflow_template_application", "https://github.com/tobegit3hub/tensorflow_template_application", "TensorFlow template application for deep learning", 1787, "Python"], ["lambda-docker", "https://github.com/tobegit3hub/lambda-docker", "Event-driven code runtime like AWS Lambda service", 301, "Python"], ["ml_implementation", "https://github.com/tobegit3hub/ml_implementation", "Implementation of Machine Learning Algorithms", 222, "Python"], ["tensorflow_examples", "https://github.com/tobegit3hub/tensorflow_examples", "TensorFlow Example Projects", 138, "Python"], ["deep_image_model", "https://github.com/tobegit3hub/deep_image_model", "Deep convolution/recurrent neural network project with TensorFlow", 102, "Python"]]], ["User", "riusksk", "https://avatars2.githubusercontent.com/u/3008098?v=4", []], ["User", "RicterZ", "https://avatars1.githubusercontent.com/u/5282759?v=4", [["genpAss", "https://github.com/RicterZ/genpAss", null, 740, "Python"], ["nhentai", "https://github.com/RicterZ/nhentai", "nhentai doujinshi downloader", 320, "Python"]]], ["User", "CHYbeta", "https://avatars2.githubusercontent.com/u/18642224?v=4", [["cmsPoc", "https://github.com/CHYbeta/cmsPoc", "CMS\u6e17\u900f\u6d4b\u8bd5\u6846\u67b6-A CMS Exploit Framework", 513, "Python"]]], ["User", "davideuler", "https://avatars2.githubusercontent.com/u/377983?v=4", []], ["User", "felixonmars", "https://avatars3.githubusercontent.com/u/1006477?v=4", [["dnsmasq-china-list", "https://github.com/felixonmars/dnsmasq-china-list", "Chinese-specific configuration to improve your favorite DNS server. Best partner for chnroutes.", 3149, "Python"], ["ydcv", "https://github.com/felixonmars/ydcv", "YouDao Console Version - Simple wrapper for Youdao online translate (Chinese <-> English) service API, as an alternative to the StarDict Console Version(sdcv).", 438, "Python"]]], ["User", "tualatrix", "https://avatars1.githubusercontent.com/u/35811?v=4", [["ubuntu-tweak", "https://github.com/tualatrix/ubuntu-tweak", "Ubuntu Tweak is a tool that makes it easy to configure your system and desktop settings. (This project is no longer under maintenance)", 668, "Python"]]], ["User", "shenweichen", "https://avatars3.githubusercontent.com/u/18311786?v=4", [["DeepCTR", "https://github.com/shenweichen/DeepCTR", "Easy-to-use,Modular and Extendible package of deep-learning based CTR models.", 2901, "Python"], ["GraphEmbedding", "https://github.com/shenweichen/GraphEmbedding", "Implementation and experiments  of graph embedding algorithms.deep walk,LINE(Large-scale Information Network Embedding),node2vec,SDNE(Structural Deep Network Embedding),struc2vec", 874, "Python"], ["DeepCTR-Torch", "https://github.com/shenweichen/DeepCTR-Torch", "\u3010PyTorch\u3011Easy-to-use,Modular and Extendible package of deep-learning based CTR models.", 393, "Python"], ["coding_interviews", "https://github.com/shenweichen/coding_interviews", "\u300a\u5251\u6307Offer\u300b\u9898\u76ee\u6c47\u603b&\u5e38\u8003\u9898\u603b\u7ed3(Python\u5b9e\u73b0)", 250, "Python"], ["DSIN", "https://github.com/shenweichen/DSIN", "Code for the IJCAI'19 paper  \"Deep Session Interest Network for Click-Through Rate Prediction\"", 190, "Python"], ["GraphNeuralNetwork", "https://github.com/shenweichen/GraphNeuralNetwork", "Implementation and experiments of graph neural netwokrs, like gcn,graphsage,gat,etc.", 153, "Python"], ["Bytedance_ICME2019_challenge_baseline", "https://github.com/shenweichen/Bytedance_ICME2019_challenge_baseline", "Bytedance_ICME2019_challenge_baseline", 112, "Python"], ["IJCAI_2018_Competition_baseline", "https://github.com/shenweichen/IJCAI_2018_Competition_baseline", "IJCAI2018\u963f\u91cc\u5988\u5988\u641c\u7d22\u5e7f\u544a\u8f6c\u5316\u7387\u9884\u4f30baseline LB 0.0831", 90, "Python"]]], ["User", "yidao620c", "https://avatars3.githubusercontent.com/u/1510785?v=4", [["core-scrapy", "https://github.com/yidao620c/core-scrapy", "python-scrapy demo", 747, "Python"], ["core-algorithm", "https://github.com/yidao620c/core-algorithm", "\u7b97\u6cd5\u96c6\u9526\u7684python\u5b9e\u73b0", 640, "Python"]]], ["User", "wklken", "https://avatars3.githubusercontent.com/u/2002216?v=4", [["py-patterns", "https://github.com/wklken/py-patterns", "\u8bbe\u8ba1\u6a21\u5f0f\u7684python\u5b9e\u73b0", 189, "Python"]]], ["User", "hongqn", "https://avatars3.githubusercontent.com/u/405587?v=4", [["umysqldb", "https://github.com/hongqn/umysqldb", "A DB-API compatible wrapper for umysql", 116, "Python"]]], ["User", "greyli", "https://avatars3.githubusercontent.com/u/12967000?v=4", [["flask-dropzone", "https://github.com/greyli/flask-dropzone", "Upload file in Flask application with Dropzone.js", 158, "Python"], ["flask-origin", "https://github.com/greyli/flask-origin", "Flask 0.1\u7248\u672c\u6e90\u7801\u6ce8\u89e3\u3002", 132, "Python"], ["PythonExercises", "https://github.com/greyli/PythonExercises", "\u6309\u7167\u96be\u5ea6\u6392\u5217\u7684\u7ecf\u5178 Python \u7ec3\u4e60\u9898\u3002", 107, "Python"], ["todoism", "https://github.com/greyli/todoism", "A to-do list application build with Flask, featured with SPA, i18n support and Web APIs.", 90, "Python"]]], ["User", "boy-hack", "https://avatars0.githubusercontent.com/u/18695984?v=4", [["w8fuckcdn", "https://github.com/boy-hack/w8fuckcdn", "Get website IP address by scanning the entire net  \u901a\u8fc7\u626b\u63cf\u5168\u7f51\u7ed5\u8fc7CDN\u83b7\u53d6\u7f51\u7ad9IP\u5730\u5740", 324, "Python"], ["airbug", "https://github.com/boy-hack/airbug", "Airbug(\u7a7a\u6c14\u6d1e)\uff0c\u6536\u96c6\u6f0f\u6d1epoc\u7528\u4e8e\u5b89\u5168\u4ea7\u54c1", 261, "Python"], ["hack-requests", "https://github.com/boy-hack/hack-requests", "The hack-requests is an http network library for hackers", 225, "Python"], ["gwhatweb", "https://github.com/boy-hack/gwhatweb", "CMS\u8bc6\u522b python gevent\u5b9e\u73b0", 181, "Python"], ["pythonwebhack", "https://github.com/boy-hack/pythonwebhack", "\u7528python\u5b9e\u73b0\u7684web\u6846\u67b6\u5efa\u7acb\u7684\u5728\u7ebf\u6e17\u900f\u5e73\u53f0", 88, "Python"]]], ["User", "Xyntax", "https://avatars1.githubusercontent.com/u/12861404?v=4", [["POC-T", "https://github.com/Xyntax/POC-T", "\u6e17\u900f\u6d4b\u8bd5\u63d2\u4ef6\u5316\u5e76\u53d1\u6846\u67b6 / Open-sourced remote vulnerability PoC/EXP framework", 1358, "Python"], ["FileSensor", "https://github.com/Xyntax/FileSensor", "Dynamic file detection tool based on crawler \u57fa\u4e8e\u722c\u866b\u7684\u52a8\u6001\u654f\u611f\u6587\u4ef6\u63a2\u6d4b\u5de5\u5177 ", 203, "Python"], ["DirBrute", "https://github.com/Xyntax/DirBrute", "\u591a\u7ebf\u7a0bWEB\u76ee\u5f55\u7206\u7834\u5de5\u5177 [Multi-thread WEB directory blasting tool(with dics inside) ]", 195, "Python"], ["BingC", "https://github.com/Xyntax/BingC", "\u57fa\u4e8eBing\u641c\u7d22\u5f15\u64ce\u7684C\u6bb5/\u65c1\u7ad9\u67e5\u8be2\uff0c\u591a\u7ebf\u7a0b\uff0c\u652f\u6301API", 81, "Python"]]], ["User", "Hawstein", "https://avatars0.githubusercontent.com/u/2238491?v=4", [["snake-ai", "https://github.com/Hawstein/snake-ai", "a snake AI written in python", 639, "Python"], ["PyMinecraft", "https://github.com/Hawstein/PyMinecraft", "Minecraft\u6e90\u7801\u9605\u8bfb\u4e0e\u5206\u6790", 405, "Python"]]], ["User", "WangYihang", "https://avatars0.githubusercontent.com/u/16917636?v=4", [["GitHacker", "https://github.com/WangYihang/GitHacker", "\ud83d\udd77\ufe0f A Git source leak exploit tool that restores the entire Git repository, including data from stash, for white-box auditing and analysis of developers' mind", 330, "Python"], ["Webshell-Sniper", "https://github.com/WangYihang/Webshell-Sniper", ":hammer: Manage your website via terminal", 321, "Python"], ["SourceLeakHacker", "https://github.com/WangYihang/SourceLeakHacker", ":bug: A multi threads web application source leak scanner", 155, "Python"], ["Reverse-Shell-Manager", "https://github.com/WangYihang/Reverse-Shell-Manager", ":hammer: A multiple reverse shell session/client manager via terminal", 139, "Python"], ["Exploit-Framework", "https://github.com/WangYihang/Exploit-Framework", ":fire: An Exploit framework for Web Vulnerabilities written in Python", 135, "Python"], ["ccupp", "https://github.com/WangYihang/ccupp", "\u57fa\u4e8e\u793e\u4f1a\u5de5\u7a0b\u5b66\u7684\u5f31\u53e3\u4ee4\u5bc6\u7801\u5b57\u5178\u751f\u6210\u5de5\u5177", 87, "Python"]]], ["User", "lining0806", "https://avatars2.githubusercontent.com/u/2107245?v=4", [["PythonSpiderNotes", "https://github.com/lining0806/PythonSpiderNotes", "Python\u5165\u95e8\u7f51\u7edc\u722c\u866b\u4e4b\u7cbe\u534e\u7248", 4622, "Python"], ["TextMining", "https://github.com/lining0806/TextMining", "Python\u6587\u672c\u6316\u6398\u7cfb\u7edf Research of Text Mining System", 242, "Python"], ["Naive-Bayes-Classifier", "https://github.com/lining0806/Naive-Bayes-Classifier", "\u6734\u7d20\u8d1d\u53f6\u65af\u6587\u672c\u5206\u7c7b\u5668", 92, "Python"], ["MachineLearningAlgorithm", "https://github.com/lining0806/MachineLearningAlgorithm", "\u4e00\u4e9b\u5e38\u7528\u7684\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\u5b9e\u73b0", 82, "Python"]]], ["User", "huxiaoman7", "https://avatars1.githubusercontent.com/u/19527386?v=4", [["PaddlePaddle_code", "https://github.com/huxiaoman7/PaddlePaddle_code", "\u7528PaddlePaddle\u548cTensorflow\u5b9e\u73b0\u5e38\u7528\u7684\u6df1\u5ea6\u5b66\u4e60\u7b97\u6cd5", 412, "Python"], ["leetcodebook", "https://github.com/huxiaoman7/leetcodebook", "leetcode 1~400\u77e5\u8bc6\u70b9&\u9898\u578b\u603b\u7ed3&leetcode\u5bf9\u5e94\u9898\u8868", 386, "Python"], ["mxnet-cnn-plate-recognition", "https://github.com/huxiaoman7/mxnet-cnn-plate-recognition", "A project to recognize Chinese plate number ", 160, "Python"]]], ["User", "Urinx", "https://avatars0.githubusercontent.com/u/5365195?v=4", [["WeixinBot", "https://github.com/Urinx/WeixinBot", "\u7f51\u9875\u7248\u5fae\u4fe1API\uff0c\u5305\u542b\u7ec8\u7aef\u7248\u5fae\u4fe1\u53ca\u5fae\u4fe1\u673a\u5668\u4eba", 6606, "Python"]]], ["User", "0x5e", "https://avatars3.githubusercontent.com/u/5144674?v=4", [["wechat-deleted-friends", "https://github.com/0x5e/wechat-deleted-friends", "\u67e5\u770b\u88ab\u5220\u7684\u5fae\u4fe1\u597d\u53cb", 4898, "Python"]]], ["User", "the5fire", "https://avatars0.githubusercontent.com/u/1171349?v=4", [["typeidea", "https://github.com/the5fire/typeidea", "Django\u4f01\u4e1a\u5f00\u53d1\u5b9e\u6218\u5bf9\u5e94\u9879\u76ee\u4ee3\u7801", 245, "Python"], ["django-practice-book", "https://github.com/the5fire/django-practice-book", "\u300aDjango\u4f01\u4e1a\u5f00\u53d1\u5b9e\u6218\u300b\u5df2\u51fa\u7248", 213, "Python"]]], ["User", "geekan", "https://avatars1.githubusercontent.com/u/2707039?v=4", [["scrapy-examples", "https://github.com/geekan/scrapy-examples", "Multifarious Scrapy examples. Spiders for alexa / amazon / douban / douyu / github / linkedin etc.", 2513, "Python"], ["insane_crawler", "https://github.com/geekan/insane_crawler", "Download best ox videos, and sort them by our rank", 393, "Python"]]], ["User", "wwj718", "https://avatars2.githubusercontent.com/u/3153878?v=4", [["wechat_bot", "https://github.com/wwj718/wechat_bot", "\u5fae\u4fe1\u804a\u5929\u673a\u5668\u4eba", 163, "Python"], ["paperweekly_forum", "https://github.com/wwj718/paperweekly_forum", "paperweekly's forum", 121, "Python"]]], ["User", "naturomics", "https://avatars2.githubusercontent.com/u/19428529?v=4", [["CapsNet-Tensorflow", "https://github.com/naturomics/CapsNet-Tensorflow", "A Tensorflow implementation of CapsNet(Capsules Net) in paper Dynamic Routing Between Capsules", 3650, "Python"], ["CapsLayer", "https://github.com/naturomics/CapsLayer", "CapsLayer: An advanced library for capsule theory", 320, "Python"]]], ["User", "wnzhang", "https://avatars2.githubusercontent.com/u/2649287?v=4", [["deep-ctr", "https://github.com/wnzhang/deep-ctr", "An attempt of training DNN models to predict ad click-through rate, implemented with Theano.", 401, "Python"]]], ["User", "waylybaye", "https://avatars2.githubusercontent.com/u/596620?v=4", []], ["User", "TideSec", "https://avatars2.githubusercontent.com/u/46297163?v=4", [["TideFinger", "https://github.com/TideSec/TideFinger", "TideFinger\u2014\u2014\u6307\u7eb9\u8bc6\u522b\u5c0f\u5de5\u5177\uff0c\u6c72\u53d6\u6574\u5408\u4e86\u591a\u4e2aweb\u6307\u7eb9\u5e93\uff0c\u7ed3\u5408\u4e86\u591a\u79cd\u6307\u7eb9\u68c0\u6d4b\u65b9\u6cd5\uff0c\u8ba9\u6307\u7eb9\u68c0\u6d4b\u66f4\u5feb\u6377\u3001\u51c6\u786e\u3002", 429, "Python"], ["web_pwd_common_crack", "https://github.com/TideSec/web_pwd_common_crack", "\u901a\u7528web\u5f31\u53e3\u4ee4\u7834\u89e3\u811a\u672c\uff0c\u65e8\u5728\u6279\u91cf\u68c0\u6d4b\u90a3\u4e9b\u6ca1\u6709\u9a8c\u8bc1\u7801\u7684\u7ba1\u7406\u540e\u53f0\uff0c\u53ef\u7528\u4e8e\u5237\u5206~", 134, "Python"]]], ["User", "isnowfy", "https://avatars2.githubusercontent.com/u/596274?v=4", [["snownlp", "https://github.com/isnowfy/snownlp", "Python library for processing Chinese text", 4570, "Python"], ["pydown", "https://github.com/isnowfy/pydown", "An HTML5 presentation builder written by python", 697, "Python"], ["collaborative-editor", "https://github.com/isnowfy/collaborative-editor", "a real time online collaborative editor written by python", 99, "Python"]]], ["User", "gnemoug", "https://avatars3.githubusercontent.com/u/1902153?v=4", [["distribute_crawler", "https://github.com/gnemoug/distribute_crawler", "\u4f7f\u7528scrapy,redis, mongodb,graphite\u5b9e\u73b0\u7684\u4e00\u4e2a\u5206\u5e03\u5f0f\u7f51\u7edc\u722c\u866b,\u5e95\u5c42\u5b58\u50a8mongodb\u96c6\u7fa4,\u5206\u5e03\u5f0f\u4f7f\u7528redis\u5b9e\u73b0,\u722c\u866b\u72b6\u6001\u663e\u793a\u4f7f\u7528graphite\u5b9e\u73b0", 3164, "Python"], ["sina_reptile", "https://github.com/gnemoug/sina_reptile", "\u83b7\u53d6\u65b0\u6d6a\u5fae\u535a1000w\u7528\u6237\u7684\u57fa\u672c\u4fe1\u606f\u548c\u6bcf\u4e2a\u722c\u53d6\u7528\u6237\u6700\u8fd1\u53d1\u8868\u768450\u6761\u5fae\u535a,\u4f7f\u7528python\u7f16\u5199\uff0c\u591a\u8fdb\u7a0b\u722c\u53d6\uff0c\u5c06\u6570\u636e\u5b58\u50a8\u5728\u4e86mongodb\u4e2d", 471, "Python"]]], ["User", "hit9", "https://avatars0.githubusercontent.com/u/1687443?v=4", [["gif2txt", "https://github.com/hit9/gif2txt", "Gif image to Ascii Text", 371, "Python"], ["skylark", "https://github.com/hit9/skylark", "No longer maintained. A micro python orm for mysql and sqlite3.", 187, "Python"]]], ["User", "lcatro", "https://avatars1.githubusercontent.com/u/10431717?v=4", [["Machine-Learning-Note", "https://github.com/lcatro/Machine-Learning-Note", "\u673a\u5668\u5b66\u4e60\u7b14\u8bb0", 407, "Python"], ["PHP_Source_Audit_Tools", "https://github.com/lcatro/PHP_Source_Audit_Tools", "PHP \u767d\u76d2\u5206\u6790\u5de5\u5177,\u7ed3\u5408AST \u548c\u6570\u636e\u6d41\u8ddf\u8e2a\u5206\u6790\u4ee3\u7801,\u8fbe\u5230\u81ea\u52a8\u5316\u767d\u76d2\u5ba1\u8ba1\u529f\u80fd", 113, "Python"], ["WebShell-Detect-By-Machine-Learning", "https://github.com/lcatro/WebShell-Detect-By-Machine-Learning", "\u4f7f\u7528\u673a\u5668\u5b66\u4e60\u8bc6\u522bWebShell", 94, "Python"], ["browser_vuln_check", "https://github.com/lcatro/browser_vuln_check", "browser_vuln_check ,\u5229\u7528\u5df2\u77e5\u7684\u6d4f\u89c8\u5668\u6f0f\u6d1ePoC \u6765\u5feb\u901f\u68c0\u6d4bWebview \u548c\u6d4f\u89c8\u5668\u73af\u5883\u662f\u5426\u5b58\u5728\u5b89\u5168\u6f0f\u6d1e,\u53ea\u9700\u8981\u8bbf\u95eerun.html \u5373\u53ef\u83b7\u53d6\u6240\u6709\u626b\u63cf\u7ed3\u679c,\u9002\u7528\u573a\u666f\u5305\u542b:APP \u53d1\u5e03\u4e4b\u524d\u7684\u5185\u90e8\u5b89\u5168\u6d4b\u8bd5,\u7b2c\u4e09\u65b9Webview \u6f0f\u6d1e\u68c0\u6d4b\u7b49(browser_vuln_check framework using some known browser vulnerabilities PoC to quick automate aduit WebView or Browser security ,apply to application security before issue and detecting third-part WebView security)..", 82, "Python"], ["CVE-2017-7269-Echo-PoC", "https://github.com/lcatro/CVE-2017-7269-Echo-PoC", "CVE-2017-7269 \u56de\u663ePoC ,\u7528\u4e8e\u8fdc\u7a0b\u6f0f\u6d1e\u68c0\u6d4b..", 81, "Python"]]], ["User", "fanpei91", "https://avatars0.githubusercontent.com/u/5484841?v=4", []], ["User", "hellock", "https://avatars3.githubusercontent.com/u/9102141?v=4", [["icrawler", "https://github.com/hellock/icrawler", "A multi-thread crawler framework with many builtin image crawlers provided.", 511, "Python"]]], ["User", "darknessomi", "https://avatars1.githubusercontent.com/u/6939375?v=4", [["musicbox", "https://github.com/darknessomi/musicbox", "\u7f51\u6613\u4e91\u97f3\u4e50\u547d\u4ee4\u884c\u7248\u672c", 8118, "Python"]]], ["User", "lawlite19", "https://avatars3.githubusercontent.com/u/14356062?v=4", [["MachineLearning_Python", "https://github.com/lawlite19/MachineLearning_Python", "\u673a\u5668\u5b66\u4e60\u7b97\u6cd5python\u5b9e\u73b0", 2746, "Python"], ["PythonCrawler-Scrapy-Mysql-File-Template", "https://github.com/lawlite19/PythonCrawler-Scrapy-Mysql-File-Template", "scrapy\u722c\u866b\u6846\u67b6\u6a21\u677f\uff0c\u5c06\u6570\u636e\u4fdd\u5b58\u5230Mysql\u6570\u636e\u5e93\u6216\u8005\u6587\u4ef6\u4e2d\u3002", 147, "Python"], ["Blog-Back-Up", "https://github.com/lawlite19/Blog-Back-Up", "\u535a\u5ba2\u76f8\u5173\u6587\u4ef6\u5b58\u50a8", 109, "Python"], ["MachineLearning_TensorFlow", "https://github.com/lawlite19/MachineLearning_TensorFlow", "TensorFlow\u5b66\u4e60", 107, "Python"]]], ["User", "xxg1413", "https://avatars1.githubusercontent.com/u/1381803?v=4", []], ["User", "ymcui", "https://avatars1.githubusercontent.com/u/16095339?v=4", [["Chinese-BERT-wwm", "https://github.com/ymcui/Chinese-BERT-wwm", "Pre-Training with Whole Word Masking for Chinese BERT\uff08\u4e2d\u6587BERT-wwm\u7cfb\u5217\u6a21\u578b\uff09", 2448, "Python"], ["Chinese-PreTrained-XLNet", "https://github.com/ymcui/Chinese-PreTrained-XLNet", "Pre-Trained Chinese XLNet\uff08\u4e2d\u6587XLNet\u9884\u8bad\u7ec3\u6a21\u578b\uff09", 804, "Python"], ["cmrc2018", "https://github.com/ymcui/cmrc2018", "A Span-Extraction Dataset for Chinese Machine Reading Comprehension  (CMRC 2018)", 140, "Python"]]], ["User", "mozillazg", "https://avatars2.githubusercontent.com/u/485054?v=4", [["python-pinyin", "https://github.com/mozillazg/python-pinyin", "\u6c49\u5b57\u8f6c\u62fc\u97f3(pypinyin)", 2439, "Python"], ["pinyin-data", "https://github.com/mozillazg/pinyin-data", "\u6c49\u5b57\u62fc\u97f3\u6570\u636e", 398, "Python"], ["baidu-pcs-python-sdk", "https://github.com/mozillazg/baidu-pcs-python-sdk", "\u767e\u5ea6\u4e2a\u4eba\u4e91\u5b58\u50a8\uff08PCS\uff09Python SDK. \uff08\u56e0\u4e3a PCS \u670d\u52a1\u5df2\u5173\u95ed\uff0c\u63a8\u8350\u6539\u7528\u767e\u5ea6\u7f51\u76d8 API\uff1a https://github.com/ly0/baidupcsapi \uff09", 177, "Python"], ["phrase-pinyin-data", "https://github.com/mozillazg/phrase-pinyin-data", "\u8bcd\u8bed\u62fc\u97f3\u6570\u636e", 168, "Python"], ["ShortURL", "https://github.com/mozillazg/ShortURL", "A URL  Shortener Site \u77ed\u7f51\u5740\u751f\u6210\u7f51\u7ad9\uff08web.py\uff09", 153, "Python"], ["pypy", "https://github.com/mozillazg/pypy", "The unofficial GitHub mirror of PyPy", 120, "Python"]]], ["User", "longcw", "https://avatars3.githubusercontent.com/u/6198400?v=4", [["faster_rcnn_pytorch", "https://github.com/longcw/faster_rcnn_pytorch", "Faster RCNN with PyTorch", 1345, "Python"], ["yolo2-pytorch", "https://github.com/longcw/yolo2-pytorch", "YOLOv2 in PyTorch", 1279, "Python"], ["pytorch2caffe", "https://github.com/longcw/pytorch2caffe", "Convert PyTorch model to Caffemodel", 456, "Python"], ["MOTDT", "https://github.com/longcw/MOTDT", "Real-time Multiple People Tracking with Deeply Learned Candidate Selection and Person Re-identification", 373, "Python"], ["youdao", "https://github.com/longcw/youdao", "\u57fa\u4e8epython \u7684\u547d\u4ee4\u884c\u4e0b\u67e5\u8bcd\u5de5\u5177\uff0c\u4f7f\u7528\u6709\u9053api", 165, "Python"]]], ["User", "Andrew-liu", "https://avatars0.githubusercontent.com/u/7943725?v=4", [["my_blog_tutorial", "https://github.com/Andrew-liu/my_blog_tutorial", "It's the example of the development of blog by Django and Pure.", 394, "Python"], ["scrapy_example", "https://github.com/Andrew-liu/scrapy_example", "This repository store some example  to learn scrapy better", 170, "Python"], ["dou_ban_spider", "https://github.com/Andrew-liu/dou_ban_spider", "A Simple spider that use to crawl the douban Top 100 moive name and input all list", 137, "Python"]]], ["User", "philsong", "https://avatars2.githubusercontent.com/u/1390304?v=4", []], ["User", "eyounx", "https://avatars3.githubusercontent.com/u/4124365?v=4", [["ZOOpt", "https://github.com/eyounx/ZOOpt", "A python package of Zeroth-Order Optimization (ZOOpt)", 299, "Python"], ["VirtualTaobao", "https://github.com/eyounx/VirtualTaobao", "Virtual-Taobao simulators with OpenAI Gym interface", 290, "Python"], ["RetroCodes", "https://github.com/eyounx/RetroCodes", "Codes of our team for the OpenAI Retro Contest of reinforcement learning", 89, "Python"]]], ["User", "yuanxiaosc", "https://avatars2.githubusercontent.com/u/16183570?v=4", [["DeepNude-an-Image-to-Image-technology", "https://github.com/yuanxiaosc/DeepNude-an-Image-to-Image-technology", "DeepNude's algorithm and general image generation theory and practice research, including pix2pix, CycleGAN, UGATIT, DCGAN, SinGAN and VAE models (TensorFlow2 implementation). DeepNude\u7684\u7b97\u6cd5\u4ee5\u53ca\u901a\u7528GAN\u56fe\u50cf\u751f\u6210\u7684\u7406\u8bba\u4e0e\u5b9e\u8df5\u7814\u7a76\u3002", 3185, "Python"], ["Entity-Relation-Extraction", "https://github.com/yuanxiaosc/Entity-Relation-Extraction", "Entity and Relation Extraction Based on TensorFlow and BERT. \u57fa\u4e8eTensorFlow\u548cBERT\u7684\u7ba1\u9053\u5f0f\u5b9e\u4f53\u53ca\u5173\u7cfb\u62bd\u53d6\uff0c2019\u8bed\u8a00\u4e0e\u667a\u80fd\u6280\u672f\u7ade\u8d5b\u4fe1\u606f\u62bd\u53d6\u4efb\u52a1\u89e3\u51b3\u65b9\u6848\u3002Schema based Knowledge Extraction, SKE 2019", 399, "Python"], ["BERT-for-Sequence-Labeling-and-Text-Classification", "https://github.com/yuanxiaosc/BERT-for-Sequence-Labeling-and-Text-Classification", "This is the template code to use BERT for sequence lableing and text classification, in order to facilitate BERT for more tasks. Currently, the template code has included conll-2003 named entity identification, Snips Slot Filling and Intent Prediction.", 185, "Python"], ["Multiple-Relations-Extraction-Only-Look-Once", "https://github.com/yuanxiaosc/Multiple-Relations-Extraction-Only-Look-Once", "Multiple-Relations-Extraction-Only-Look-Once. Just look at the sentence once and extract the multiple pairs of entities and their corresponding relations. \u7aef\u5230\u7aef\u8054\u5408\u591a\u5173\u7cfb\u62bd\u53d6\u6a21\u578b\uff0c\u53ef\u7528\u4e8e http://lic2019.ccf.org.cn/kg \u4fe1\u606f\u62bd\u53d6\u3002", 151, "Python"], ["Schema-based-Knowledge-Extraction", "https://github.com/yuanxiaosc/Schema-based-Knowledge-Extraction", "Code for http://lic2019.ccf.org.cn/kg \u4fe1\u606f\u62bd\u53d6\u3002\u4f7f\u7528\u57fa\u4e8e BERT \u7684\u5b9e\u4f53\u62bd\u53d6\u548c\u5173\u7cfb\u62bd\u53d6\u7684\u7aef\u5230\u7aef\u7684\u8054\u5408\u6a21\u578b\u3002", 128, "Python"]]], ["User", "xlzd", "https://avatars1.githubusercontent.com/u/5506906?v=4", [["img2html", "https://github.com/xlzd/img2html", "Convert image to HTML", 778, "Python"], ["zhihu.photo", "https://github.com/xlzd/zhihu.photo", "zhihu.photo Web \u53ca\u722c\u866b\u90e8\u5206\u6e90\u7801", 184, "Python"], ["xart", "https://github.com/xlzd/xart", " generate art ascii texts", 141, "Python"]]], ["User", "nondanee", "https://avatars0.githubusercontent.com/u/26399680?v=4", [["ncmdump", "https://github.com/nondanee/ncmdump", "python\u7248\u672c\u7f51\u6613\u4e91\u97f3\u4e50ncm\u6587\u4ef6\u683c\u5f0f\u8f6c\u6362", 501, "Python"], ["weiboPicDownloader", "https://github.com/nondanee/weiboPicDownloader", "Download weibo images without logging-in", 200, "Python"]]], ["User", "aploium", "https://avatars3.githubusercontent.com/u/15957250?v=4", [["zmirror", "https://github.com/aploium/zmirror", "The next-gen reverse proxy for full site mirroring", 1965, "Python"], ["shootback", "https://github.com/aploium/shootback", "a reverse TCP tunnel let you access target behind NAT or firewall", 689, "Python"], ["zmirror-onekey", "https://github.com/aploium/zmirror-onekey", "\u4e00\u952e\u90e8\u7f72zmirror\u955c\u50cf", 428, "Python"]]], ["User", "lanbing510", "https://avatars1.githubusercontent.com/u/6869284?v=4", [["DouBanSpider", "https://github.com/lanbing510/DouBanSpider", "\u8c46\u74e3\u8bfb\u4e66\u7684\u722c\u866b", 1912, "Python"], ["LianJiaSpider", "https://github.com/lanbing510/LianJiaSpider", "\u94fe\u5bb6\u722c\u866b", 502, "Python"]]], ["User", "fate0", "https://avatars1.githubusercontent.com/u/6829628?v=4", [["getproxy", "https://github.com/fate0/getproxy", "getproxy \u662f\u4e00\u4e2a\u6293\u53d6\u53d1\u653e\u4ee3\u7406\u7f51\u7ad9\uff0c\u83b7\u53d6 http/https \u4ee3\u7406\u7684\u7a0b\u5e8f", 576, "Python"], ["pychrome", "https://github.com/fate0/pychrome", "A Python Package for the Google Chrome Dev Protocol [threading base]", 403, "Python"]]], ["User", "whtsky", "https://avatars3.githubusercontent.com/u/876694?v=4", [["Catsup", "https://github.com/whtsky/Catsup", "A lightweight static website generator which aims to be simple and elegant.", 135, "Python"], ["maga", "https://github.com/whtsky/maga", "Another DHT crawler written in Python using asyncio", 120, "Python"]]], ["User", "shanzi", "https://avatars0.githubusercontent.com/u/557294?v=4", []], ["User", "tonyseek", "https://avatars2.githubusercontent.com/u/624598?v=4", [["simple-rbac", "https://github.com/tonyseek/simple-rbac", "A simple role based access control utility for Python.", 233, "Python"], ["rsocks", "https://github.com/tonyseek/rsocks", "A SOCKS 4/5 reverse proxy server", 102, "Python"]]], ["User", "tengzhangchao", "https://avatars1.githubusercontent.com/u/16537831?v=4", [["BaiDuPan", "https://github.com/tengzhangchao/BaiDuPan", "\u767e\u5ea6\u7f51\u76d8\u81ea\u52a8\u6dfb\u52a0\u8d44\u6e90\u811a\u672c", 221, "Python"], ["Struts2_045-Poc", "https://github.com/tengzhangchao/Struts2_045-Poc", "Struts2-045 POC", 108, "Python"]]], ["User", "chyroc", "https://avatars3.githubusercontent.com/u/15604894?v=4", [["WechatSogou", "https://github.com/chyroc/WechatSogou", "\u57fa\u4e8e\u641c\u72d7\u5fae\u4fe1\u641c\u7d22\u7684\u5fae\u4fe1\u516c\u4f17\u53f7\u722c\u866b\u63a5\u53e3", 4336, "Python"], ["JDong", "https://github.com/chyroc/JDong", "\u4eac\u4e1c\u6570\u636e\u722c\u866b\u63a5\u53e3", 114, "Python"]]], ["User", "xchaoinfo", "https://avatars3.githubusercontent.com/u/10547442?v=4", [["fuck-login", "https://github.com/xchaoinfo/fuck-login", "\u6a21\u62df\u767b\u5f55\u4e00\u4e9b\u77e5\u540d\u7684\u7f51\u7ad9\uff0c\u4e3a\u4e86\u65b9\u4fbf\u722c\u53d6\u9700\u8981\u767b\u5f55\u7684\u7f51\u7ad9", 5477, "Python"]]], ["User", "youfou", "https://avatars0.githubusercontent.com/u/16631068?v=4", [["wxpy", "https://github.com/youfou/wxpy", "\u5fae\u4fe1\u673a\u5668\u4eba / \u53ef\u80fd\u662f\u6700\u4f18\u96c5\u7684\u5fae\u4fe1\u4e2a\u4eba\u53f7 API \u2728\u2728", 11891, "Python"], ["hsdata", "https://github.com/youfou/hsdata", "\u7528\u6570\u636e\u73a9\u7089\u77f3\uff01\u5feb\u901f\u6536\u96c6\u548c\u5206\u6790\u7089\u77f3\u4f20\u8bf4\u7684\u5361\u724c\u53ca\u5361\u7ec4\u6570\u636e", 100, "Python"], ["liaoxuefeng-tutorials", "https://github.com/youfou/liaoxuefeng-tutorials", "\u7528 Python \u81ea\u52a8\u6574\u7406\u5ed6\u96ea\u5cf0\u7684 Git, Python 2/3, JavaScript \u6559\u7a0b\uff0c\u4fdd\u5b58\u4e3a HTML \u683c\u5f0f\uff0c\u53ef\u7528\u4e8e\u5236\u4f5c\u7535\u5b50\u4e66", 98, "Python"]]], ["User", "az0ne", "https://avatars1.githubusercontent.com/u/8131223?v=4", [["Github_Nuggests", "https://github.com/az0ne/Github_Nuggests", "\u81ea\u52a8\u722c\u53d6Github\u4e0a\u6587\u4ef6\u654f\u611f\u4fe1\u606f\u6cc4\u9732\uff0c\u6293\u53d6\u90ae\u7bb1\u5bc6\u7801\u5e76\u81ea\u52a8\u767b\u5f55\u90ae\u7bb1\u9a8c\u8bc1\uff0c\u652f\u6301126\uff0cqq\uff0csina\uff0c163\u90ae\u7bb1", 239, "Python"]]], ["User", "OneSourceCat", "https://avatars0.githubusercontent.com/u/9295957?v=4", [["scan-framework", "https://github.com/OneSourceCat/scan-framework", "A framework used for Vulnerability scanning", 98, "Python"], ["sqli-proxy", "https://github.com/OneSourceCat/sqli-proxy", null, 81, "Python"]]], ["User", "zTrix", "https://avatars3.githubusercontent.com/u/471934?v=4", [["zio", "https://github.com/zTrix/zio", "unified io lib for pwning development written in python", 325, "Python"]]], ["User", "yueyoum", "https://avatars3.githubusercontent.com/u/2081686?v=4", [["social-oauth", "https://github.com/yueyoum/social-oauth", "OAuth2 for Chinese social sites", 331, "Python"], ["django-siteuser", "https://github.com/yueyoum/django-siteuser", "Register, Login, OAuth2, Upload avatar...", 252, "Python"], ["renren-relationship", "https://github.com/yueyoum/renren-relationship", "\u4eba\u4eba\u597d\u53cb\u5173\u7cfb", 188, "Python"], ["seven-cow", "https://github.com/yueyoum/seven-cow", "Yet another qiniu cloud storage Python SDK. More Pythonic, More simple to use", 131, "Python"], ["django-social-login", "https://github.com/yueyoum/django-social-login", "[DISCARDED]A Django APP for Social accounts login via OAuth2 Service", 112, "Python"]]], ["User", "CaledoniaProject", "https://avatars0.githubusercontent.com/u/1357701?v=4", []], ["User", "Dliv3", "https://avatars0.githubusercontent.com/u/13077860?v=4", [["redis-rogue-server", "https://github.com/Dliv3/redis-rogue-server", "Redis 4.x/5.x RCE", 94, "Python"]]], ["User", "shiyanhui", "https://avatars0.githubusercontent.com/u/7406269?v=4", [["Young", "https://github.com/shiyanhui/Young", "A full-featured forum software built on Tornado and MongoDB.", 735, "Python"], ["FileHeader", "https://github.com/shiyanhui/FileHeader", "A powerful file templating plugin for Sublime Text", 197, "Python"], ["Compiler", "https://github.com/shiyanhui/Compiler", "Compiler for C language in python", 186, "Python"]]], ["User", "neargle", "https://avatars0.githubusercontent.com/u/7868679?v=4", [["ver-observer", "https://github.com/neargle/ver-observer", "Detection version of framework \\ CMS \\ dev-dependence on target website.", 82, "Python"]]], ["User", "michuanhaohao", "https://avatars0.githubusercontent.com/u/23547900?v=4", [["reid-strong-baseline", "https://github.com/michuanhaohao/reid-strong-baseline", "Bag of Tricks and A Strong Baseline for Deep Person Re-identification", 1028, "Python"], ["AlignedReID", "https://github.com/michuanhaohao/AlignedReID", "Alignedreid\uff0b+: Dynamically Matching Local Information for Person Re-Identification.", 232, "Python"], ["keras_reid", "https://github.com/michuanhaohao/keras_reid", "Margin Sample Mining Loss: A Deep Learning Based Method for Person Re-identification", 162, "Python"]]], ["User", "PytLab", "https://avatars1.githubusercontent.com/u/8553710?v=4", [["gaft", "https://github.com/PytLab/gaft", "A Genetic Algorithm Framework in Python", 584, "Python"], ["simpleflow", "https://github.com/PytLab/simpleflow", "A simple TensorFlow-like graph computation framework in Python for learning purpose", 172, "Python"], ["VASPy", "https://github.com/PytLab/VASPy", "Manipulating VASP files with Python.", 144, "Python"]]], ["User", "egrcc", "https://avatars3.githubusercontent.com/u/6469953?v=4", [["zhihu-python", "https://github.com/egrcc/zhihu-python", "\u83b7\u53d6\u77e5\u4e4e\u5185\u5bb9\u4fe1\u606f\uff0c\u5305\u62ec\u95ee\u9898\uff0c\u7b54\u6848\uff0c\u7528\u6237\uff0c\u6536\u85cf\u5939\u4fe1\u606f", 2084, "Python"]]], ["User", "virink", "https://avatars2.githubusercontent.com/u/15978207?v=4", []], ["User", "lexdene", "https://avatars3.githubusercontent.com/u/694227?v=4", []], ["User", "piglei", "https://avatars1.githubusercontent.com/u/731266?v=4", [["uwsgi-sloth", "https://github.com/piglei/uwsgi-sloth", "Realtime uwsgi log file analyzer, slow requests analyzer.", 202, "Python"]]], ["User", "cleardusk", "https://avatars1.githubusercontent.com/u/7555251?v=4", [["3DDFA", "https://github.com/cleardusk/3DDFA", "The PyTorch improved version of TPAMI 2017 paper: Face Alignment in Full Pose Range: A 3D Total Solution.", 2369, "Python"]]], ["User", "hubo1016", "https://avatars3.githubusercontent.com/u/14069404?v=4", [["vlcp", "https://github.com/hubo1016/vlcp", "A production-ready SDN controller, and a highly-extensible SDN framework.", 186, "Python"], ["aiogrpc", "https://github.com/hubo1016/aiogrpc", "asyncio wrapper for grpc.io", 104, "Python"]]], ["User", "snowkylin", "https://avatars1.githubusercontent.com/u/9656107?v=4", [["TensorFlow-cn", "https://github.com/snowkylin/TensorFlow-cn", "\u7b80\u5355\u7c97\u66b4 TensorFlow (1.X) | A Concise Handbook of TensorFlow (1.X)", 873, "Python"], ["line", "https://github.com/snowkylin/line", "TensorFlow implementation of paper \"LINE: Large-scale Information Network Embedding\" by Jian Tang, et al.", 154, "Python"], ["ntm", "https://github.com/snowkylin/ntm", "TensorFlow implementation of Neural Turing Machines (NTM), with its application on one-shot learning (MANN)", 147, "Python"], ["rnn-handwriting-generation", "https://github.com/snowkylin/rnn-handwriting-generation", "Handwriting generation by RNN with TensorFlow, based on \"Generating Sequences With Recurrent Neural Networks\" by Alex Graves", 80, "Python"]]], ["User", "wofeiwo", "https://avatars0.githubusercontent.com/u/1016470?v=4", []], ["User", "howl-anderson", "https://avatars2.githubusercontent.com/u/1263428?v=4", [["tools_for_corpus_of_people_daily", "https://github.com/howl-anderson/tools_for_corpus_of_people_daily", "\u4eba\u6c11\u65e5\u62a5\u8bed\u6599\u5904\u7406\u5de5\u5177\u96c6 | Tools for Corpus of People's Daily", 126, "Python"], ["hanzi_char_featurizer", "https://github.com/howl-anderson/hanzi_char_featurizer", "\u6c49\u5b57\u5b57\u7b26\u7279\u5f81\u63d0\u53d6\u5668 (featurizer)\uff0c\u63d0\u53d6\u6c49\u5b57\u7684\u7279\u5f81\uff08\u53d1\u97f3\u7279\u5f81\u3001\u5b57\u5f62\u7279\u5f81\uff09\u7528\u505a\u6df1\u5ea6\u5b66\u4e60\u7684\u7279\u5f81", 104, "Python"], ["MicroTokenizer", "https://github.com/howl-anderson/MicroTokenizer", "\u4e00\u4e2a\u5fae\u578b&\u7b97\u6cd5\u5168\u9762\u7684\u4e2d\u6587\u5206\u8bcd\u5f15\u64ce | A micro tokenizer for Chinese", 93, "Python"]]], ["User", "tg123", "https://avatars1.githubusercontent.com/u/170430?v=4", []], ["User", "bamtercelboo", "https://avatars0.githubusercontent.com/u/22359268?v=4", [["cnn-lstm-bilstm-deepcnn-clstm-in-pytorch", "https://github.com/bamtercelboo/cnn-lstm-bilstm-deepcnn-clstm-in-pytorch", "In PyTorch Learing Neural Networks Likes CNN(Convolutional Neural Networks for Sentence Classification (Y.Kim, EMNLP 2014) \u3001LSTM\u3001BiLSTM\u3001DeepCNN \u3001CLSTM\u3001CNN and LSTM", 557, "Python"], ["pytorch_NER_BiLSTM_CNN_CRF", "https://github.com/bamtercelboo/pytorch_NER_BiLSTM_CNN_CRF", "End-to-end Sequence Labeling via Bi-directional LSTM-CNNs-CRF implement in pyotrch ", 165, "Python"], ["corpus_process_script", "https://github.com/bamtercelboo/corpus_process_script", "chinese and english corpus process script, python, c++, java", 111, "Python"], ["pytorch_word2vec", "https://github.com/bamtercelboo/pytorch_word2vec", "Use pytorch to implement word2vec", 101, "Python"]]], ["User", "qinxuye", "https://avatars1.githubusercontent.com/u/357506?v=4", [["cola", "https://github.com/qinxuye/cola", "A high-level distributed crawling framework.", 1366, "Python"]]], ["User", "LyleMi", "https://avatars0.githubusercontent.com/u/11925471?v=4", [["Learn-Web-Hacking", "https://github.com/LyleMi/Learn-Web-Hacking", "Study Notes For Web Hacking / Web\u5b89\u5168\u5b66\u4e60\u7b14\u8bb0", 1018, "Python"]]], ["User", "messense", "https://avatars0.githubusercontent.com/u/1556054?v=4", [["wechat-bot", "https://github.com/messense/wechat-bot", "A robot of wechat based on python (Not maintained)", 168, "Python"]]], ["User", "ZhaoJ9014", "https://avatars0.githubusercontent.com/u/25601090?v=4", [["face.evoLVe.PyTorch", "https://github.com/ZhaoJ9014/face.evoLVe.PyTorch", "\ud83d\udd25\ud83d\udd25High-Performance Face Recognition Library on PyTorch\ud83d\udd25\ud83d\udd25", 1643, "Python"], ["High-Performance-Face-Recognition", "https://github.com/ZhaoJ9014/High-Performance-Face-Recognition", "\ud83d\udd25\ud83d\udd25Several High-Performance Models for Unconstrained/Large-Scale/Low-Shot Face Recognition\ud83d\udd25\ud83d\udd25", 267, "Python"], ["Dynamic-Conditional-Networks.PyTorch", "https://github.com/ZhaoJ9014/Dynamic-Conditional-Networks.PyTorch", "\ud83d\udd25\ud83d\udd25A pytorch implementation of Dynamic Convolutional Layer in Dynamic Conditional Convolutional Network for Few-Shot Learning\ud83d\udd25\ud83d\udd25", 115, "Python"]]], ["User", "jiajunhuang", "https://avatars2.githubusercontent.com/u/5924269?v=4", []], ["User", "Yikun", "https://avatars2.githubusercontent.com/u/1736354?v=4", []], ["User", "candlewill", "https://avatars1.githubusercontent.com/u/4916563?v=4", [["Dialog_Corpus", "https://github.com/candlewill/Dialog_Corpus", "\u7528\u4e8e\u8bad\u7ec3\u4e2d\u82f1\u6587\u5bf9\u8bdd\u7cfb\u7edf\u7684\u8bed\u6599\u5e93 Datasets for Training Chatbot System", 1346, "Python"]]], ["User", "Flowerowl", "https://avatars3.githubusercontent.com/u/1586995?v=4", [["ici", "https://github.com/Flowerowl/ici", ":boom:A dictionary used by programmers in the command line", 182, "Python"]]], ["User", "ferventdesert", "https://avatars3.githubusercontent.com/u/5305722?v=4", [["etlpy", "https://github.com/ferventdesert/etlpy", "a smart stream-like crawler & etl python library", 390, "Python"], ["Hawk-Projects", "https://github.com/ferventdesert/Hawk-Projects", "Project configurations of Hawk and etlpy.  xml-format workflow define", 140, "Python"]]], ["User", "hamuchiwa", "https://avatars3.githubusercontent.com/u/9021941?v=4", [["AutoRCCar", "https://github.com/hamuchiwa/AutoRCCar", "OpenCV Python Neural Network Autonomous RC Car", 2509, "Python"]]], ["User", "PandasCute", "https://avatars1.githubusercontent.com/u/38517348?v=4", [["2018-CCF-BDCI-China-Unicom-Research-Institute-top2", "https://github.com/PandasCute/2018-CCF-BDCI-China-Unicom-Research-Institute-top2", "2018-CCF\u5927\u6570\u636e\u4e0e\u8ba1\u7b97\u667a\u80fd\u5927\u8d5b-\u9762\u5411\u7535\u4fe1\u884c\u4e1a\u5b58\u91cf\u7528\u6237\u7684\u667a\u80fd\u5957\u9910\u4e2a\u6027\u5316\u5339\u914d\u6a21\u578b\u8054\u901a\u8d5b-\u590d\u8d5b\u7b2c\u4e8c\u540d-\u3010\u591a\u5206\u7c7b\uff0cembedding\u3011", 293, "Python"]]], ["User", "qq547276542", "https://avatars3.githubusercontent.com/u/17894585?v=4", [["Agriculture_KnowledgeGraph", "https://github.com/qq547276542/Agriculture_KnowledgeGraph", "\u519c\u4e1a\u77e5\u8bc6\u56fe\u8c31(AgriKG)\uff1a\u519c\u4e1a\u9886\u57df\u7684\u4fe1\u606f\u68c0\u7d22\uff0c\u547d\u540d\u5b9e\u4f53\u8bc6\u522b\uff0c\u5173\u7cfb\u62bd\u53d6\uff0c\u667a\u80fd\u95ee\u7b54\uff0c\u8f85\u52a9\u51b3\u7b56", 2074, "Python"]]], ["User", "9miao", "https://avatars1.githubusercontent.com/u/5196133?v=4", [["Firefly", "https://github.com/9miao/Firefly", "Distributed Game Server Framework", 1055, "Python"], ["G-Firefly", "https://github.com/9miao/G-Firefly", "Firefly's gevent version, with better perfromance than its previous twisted version", 128, "Python"]]], ["User", "nladuo", "https://avatars0.githubusercontent.com/u/13132077?v=4", [["taobao_bra_crawler", "https://github.com/nladuo/taobao_bra_crawler", "a taobao web crawler just for fun.", 188, "Python"]]], ["User", "donnyyou", "https://avatars1.githubusercontent.com/u/23111956?v=4", [["torchcv-seg", "https://github.com/donnyyou/torchcv-seg", "Semantic Segmentation ported from TorchCV", 151, "Python"]]], ["User", "SilverRainZ", "https://avatars0.githubusercontent.com/u/8090459?v=4", []], ["User", "hjptriplebee", "https://avatars3.githubusercontent.com/u/22477665?v=4", [["Chinese_poem_generator", "https://github.com/hjptriplebee/Chinese_poem_generator", "\u5510\u8bd7\u3001\u5b8b\u8bcd\u751f\u6210\u5668\uff0c\u6709\u8be6\u7ec6\u8bf4\u660e", 354, "Python"], ["VGG19_with_tensorflow", "https://github.com/hjptriplebee/VGG19_with_tensorflow", "An easy implement of VGG19 with tensorflow, which has a detailed explanation.", 169, "Python"], ["AlexNet_with_tensorflow", "https://github.com/hjptriplebee/AlexNet_with_tensorflow", "an implement of AlexNet with tensorflow, which has a detailed explanation.", 126, "Python"]]], ["User", "FutunnOpen", "https://avatars1.githubusercontent.com/u/25790136?v=4", [["futuquant", "https://github.com/FutunnOpen/futuquant", "\u5bcc\u9014\u5f00\u653eAPI Python SDK\uff08\u56e0\u66f4\u540d\u5e9f\u5f03\uff0c \u8f6c\u5230 py-futu-api \uff09", 747, "Python"], ["py-futu-api", "https://github.com/FutunnOpen/py-futu-api", "\u5bcc\u9014\u5f00\u653eAPI  Python SDK", 376, "Python"]]], ["User", "A7um", "https://avatars2.githubusercontent.com/u/22323912?v=4", []], ["User", "gaojiuli", "https://avatars1.githubusercontent.com/u/15275188?v=4", [["toapi", "https://github.com/gaojiuli/toapi", "Every web site provides APIs.", 2986, "Python"], ["gain", "https://github.com/gaojiuli/gain", "Web crawling framework  based on asyncio.", 1961, "Python"], ["tomd", "https://github.com/gaojiuli/tomd", "Convert HTML to Markdown.", 448, "Python"], ["xweb", "https://github.com/gaojiuli/xweb", "High performance async web framework.", 311, "Python"]]], ["User", "JackonYang", "https://avatars0.githubusercontent.com/u/3008778?v=4", [["renren", "https://github.com/JackonYang/renren", "\u4eba\u4eba\u7f51\u4fe1\u606f\u6293\u53d6\u4e0e\u6570\u636e\u6316\u6398\u3002social network analysis", 87, "Python"], ["bookhub", "https://github.com/JackonYang/bookhub", "eBook manager and sharing tools", 83, "Python"]]], ["User", "ihciah", "https://avatars0.githubusercontent.com/u/1707505?v=4", [["deep-fashion-retrieval", "https://github.com/ihciah/deep-fashion-retrieval", "Simple image retrival on deep-fashion dataset with pytorch - A course project", 156, "Python"]]], ["User", "Rockyzsu", "https://avatars3.githubusercontent.com/u/7868260?v=4", [["zhihuToKindle", "https://github.com/Rockyzsu/zhihuToKindle", "\u6a21\u62df\u767b\u9646\u77e5\u4e4e\uff0c\u83b7\u53d6\u5173\u6ce8\u95ee\u9898\u7684id\u4e0b \u6240\u6709\u7b54\u6848\uff0c\u5e76\u63a8\u9001\u5230kindle\u7535\u5b50\u4e66", 137, "Python"]]], ["User", "Q2h1Cg", "https://avatars2.githubusercontent.com/u/3953030?v=4", [["CMS-Exploit-Framework", "https://github.com/Q2h1Cg/CMS-Exploit-Framework", "CMS Exploit Framework", 168, "Python"]]], ["User", "fancyerii", "https://avatars0.githubusercontent.com/u/5372812?v=4", []], ["User", "liuwons", "https://avatars2.githubusercontent.com/u/9864950?v=4", [["wxBot", "https://github.com/liuwons/wxBot", "Python\u7f51\u9875\u5fae\u4fe1API", 5002, "Python"]]], ["User", "kamikat", "https://avatars3.githubusercontent.com/u/1108801?v=4", []], ["User", "reorx", "https://avatars2.githubusercontent.com/u/405972?v=4", [["httpstat", "https://github.com/reorx/httpstat", "curl statistics made simple", 4036, "Python"]]], ["User", "MhLiao", "https://avatars1.githubusercontent.com/u/21288480?v=4", [["DB", "https://github.com/MhLiao/DB", "A PyToch implementation of \"Real-time Scene Text Detection with Differentiable Binarization\".", 545, "Python"], ["MaskTextSpotter", "https://github.com/MhLiao/MaskTextSpotter", "A PyTorch implementation of Mask TextSpotter", 187, "Python"]]], ["User", "wooparadog", "https://avatars2.githubusercontent.com/u/1130984?v=4", [["pystack", "https://github.com/wooparadog/pystack", "Tool to dump python thread and greenlet stacks.", 95, "Python"]]], ["User", "kxxoling", "https://avatars2.githubusercontent.com/u/1227139?v=4", [["PTable", "https://github.com/kxxoling/PTable", "PrettyTable is a simple Python library designed to make it quick and easy to represent tabular data in visually appealing ASCII tables.", 114, "Python"]]], ["User", "aisk", "https://avatars0.githubusercontent.com/u/699636?v=4", []], ["User", "m0xiaoxi", "https://avatars0.githubusercontent.com/u/14024726?v=4", []], ["User", "MoyanZitto", "https://avatars0.githubusercontent.com/u/10725096?v=4", [["keras-scripts", "https://github.com/MoyanZitto/keras-scripts", "This is my keras-scripts", 86, "Python"]]], ["User", "sylnsfar", "https://avatars1.githubusercontent.com/u/21075976?v=4", [["qrcode", "https://github.com/sylnsfar/qrcode", "artistic QR Code in Python \uff08Animated GIF qr code\uff09- Python \u827a\u672f\u4e8c\u7ef4\u7801\u751f\u6210\u5668 \uff08GIF\u52a8\u6001\u4e8c\u7ef4\u7801\u3001\u56fe\u7247\u4e8c\u7ef4\u7801\uff09", 7034, "Python"]]], ["User", "HaoMood", "https://avatars3.githubusercontent.com/u/4077669?v=4", [["bilinear-cnn", "https://github.com/HaoMood/bilinear-cnn", "PyTorch implementation of bilinear CNN for fine-grained image recognition", 264, "Python"]]], ["User", "lxyu", "https://avatars3.githubusercontent.com/u/678685?v=4", [["17monip", "https://github.com/lxyu/17monip", "IP search based on 17mon.cn, the best IP database for China.", 276, "Python"], ["weibo", "https://github.com/lxyu/weibo", "Python sina weibo sdk. More simpler and cleaner than the official one.", 230, "Python"], ["pinyin", "https://github.com/lxyu/pinyin", "A simple python script to translate chinese to pinyin based on Mandarin.dat", 161, "Python"], ["kindle-clippings", "https://github.com/lxyu/kindle-clippings", "A simple python script to extract clippings from 'My Clippings.txt', organize, store and output them in a more elegant way.", 89, "Python"]]], ["User", "fy0", "https://avatars1.githubusercontent.com/u/1579850?v=4", [["fpage", "https://github.com/fy0/fpage", "Tornado project generator. Start a project with tornado, mako/jinjia2 and sqlalchemy/peewee in a minute.", 232, "Python"]]], ["User", "adyliu", "https://avatars3.githubusercontent.com/u/1171396?v=4", []], ["User", "MarkWuNLP", "https://avatars2.githubusercontent.com/u/14267648?v=4", [["MultiTurnResponseSelection", "https://github.com/MarkWuNLP/MultiTurnResponseSelection", "This repo contains our ACL 2017 paper data and source code ", 478, "Python"]]], ["User", "vicalloy", "https://avatars2.githubusercontent.com/u/43507?v=4", [["LBForum", "https://github.com/vicalloy/LBForum", "LBForum is a forum engine written in Python using Django", 582, "Python"], ["django-lb-workflow", "https://github.com/vicalloy/django-lb-workflow", "Reusable workflow library for Django", 114, "Python"], ["DPress", "https://github.com/vicalloy/DPress", "A simple blog powered by Django", 84, "Python"]]], ["User", "jimenbian", "https://avatars2.githubusercontent.com/u/6119538?v=4", [["DataMining", "https://github.com/jimenbian/DataMining", "My data mining code\uff01", 152, "Python"]]], ["User", "Skycrab", "https://avatars2.githubusercontent.com/u/1755025?v=4", [["weixin-knife", "https://github.com/Skycrab/weixin-knife", "weixin python framework", 324, "Python"], ["wzhifuSDK", "https://github.com/Skycrab/wzhifuSDK", "\u5fae\u4fe1\u652f\u4ed8SDK", 194, "Python"]]], ["User", "twocucao", "https://avatars3.githubusercontent.com/u/5625783?v=4", [["danmu.fm", "https://github.com/twocucao/danmu.fm", "douyutv danmu \u6597\u9c7cTV \u5f39\u5e55\u52a9\u624b", 306, "Python"], ["YaDjangoBlog", "https://github.com/twocucao/YaDjangoBlog", "\u4e00\u4e2a Django Best Practice \u6700\u4f73\u5b9e\u8df5", 295, "Python"]]], ["User", "lc-soft", "https://avatars3.githubusercontent.com/u/1730073?v=4", []], ["User", "zijundeng", "https://avatars1.githubusercontent.com/u/23656747?v=4", [["pytorch-semantic-segmentation", "https://github.com/zijundeng/pytorch-semantic-segmentation", "PyTorch for Semantic Segmentation", 1224, "Python"], ["R3Net", "https://github.com/zijundeng/R3Net", "Code for the IJCAI 2018 paper \"R^3Net: Recurrent Residual Refinement Network for Saliency Detection\"", 87, "Python"]]], ["User", "John-Lin", "https://avatars1.githubusercontent.com/u/4214069?v=4", []], ["User", "BruceDone", "https://avatars2.githubusercontent.com/u/12979090?v=4", [["scrapy_demo", "https://github.com/BruceDone/scrapy_demo", "all kinds of scrapy demo ", 122, "Python"], ["tensorflow-demos", "https://github.com/BruceDone/tensorflow-demos", "all kinds of demos of tensorflow code ", 87, "Python"]]], ["User", "leisurelicht", "https://avatars0.githubusercontent.com/u/8042345?v=4", [["wtfpython-cn", "https://github.com/leisurelicht/wtfpython-cn", "wtfpython\u7684\u4e2d\u6587\u7ffb\u8bd1/\u65bd\u5de5\u7ed3\u675f/ \u80fd\u529b\u6709\u9650\uff0c\u6b22\u8fce\u5e2e\u6211\u6539\u8fdb\u7ffb\u8bd1", 9929, "Python"]]], ["User", "liluo", "https://avatars1.githubusercontent.com/u/741755?v=4", [["py-oauth2", "https://github.com/liluo/py-oauth2", "A Python wrapper for the OAuth 2.0 specification", 103, "Python"]]], ["User", "qiyuangong", "https://avatars1.githubusercontent.com/u/3848789?v=4", [["leetcode", "https://github.com/qiyuangong/leetcode", "Python & JAVA Solutions for Leetcode", 2226, "Python"], ["Mondrian", "https://github.com/qiyuangong/Mondrian", "Python Implementation for Mondrian Multidimensional K-Anonymity (Mondrian).", 86, "Python"]]], ["User", "speedinghzl", "https://avatars2.githubusercontent.com/u/4509744?v=4", [["CCNet", "https://github.com/speedinghzl/CCNet", "CCNet: Criss-Cross Attention for Semantic Segmentation (ICCV 2019).", 771, "Python"], ["pytorch-segmentation-toolbox", "https://github.com/speedinghzl/pytorch-segmentation-toolbox", "PyTorch Implementations for DeeplabV3 and PSPNet", 586, "Python"], ["Pytorch-Deeplab", "https://github.com/speedinghzl/Pytorch-Deeplab", "DeepLab-ResNet rebuilt in Pytorch", 233, "Python"], ["DSRG", "https://github.com/speedinghzl/DSRG", "Weakly-Supervised Semantic Segmentation Network with Deep Seeded Region Growing (CVPR 2018).", 177, "Python"]]], ["User", "wkcn", "https://avatars1.githubusercontent.com/u/3415417?v=4", [["MobulaOP", "https://github.com/wkcn/MobulaOP", "A Simple & Flexible Cross Framework Operators Toolkit", 148, "Python"]]], ["User", "wuhuikai", "https://avatars0.githubusercontent.com/u/6862805?v=4", [["FastFCN", "https://github.com/wuhuikai/FastFCN", "FastFCN: Rethinking Dilated Convolution in the Backbone for Semantic Segmentation.", 575, "Python"], ["DeepGuidedFilter", "https://github.com/wuhuikai/DeepGuidedFilter", "Official Implementation of Fast End-to-End Trainable Guided Filter, CVPR 2018", 476, "Python"], ["FaceSwap", "https://github.com/wuhuikai/FaceSwap", "Swap face between two photos. ", 254, "Python"], ["GP-GAN", "https://github.com/wuhuikai/GP-GAN", "Official Chainer implementation of GP-GAN: Towards Realistic High-Resolution Image Blending (ACMMM 2019, oral)", 244, "Python"], ["TF-A2RL", "https://github.com/wuhuikai/TF-A2RL", "The official implementation for A2-RL: Aesthetics Aware Rinforcement Learning for Automatic Image Cropping", 142, "Python"], ["MSC", "https://github.com/wuhuikai/MSC", "MSC: A Dataset for Macro-Management in StarCraft II", 119, "Python"]]], ["User", "SeanLee97", "https://avatars0.githubusercontent.com/u/12824323?v=4", [["xmnlp", "https://github.com/SeanLee97/xmnlp", "\u5c0f\u660eNLP\uff1a\u63d0\u4f9b\u4e2d\u6587\u5206\u8bcd, \u8bcd\u6027\u6807\u6ce8, \u62fc\u5199\u68c0\u67e5\uff0c\u6587\u672c\u8f6c\u62fc\u97f3\uff0c\u60c5\u611f\u5206\u6790\uff0c\u6587\u672c\u6458\u8981\uff0c\u504f\u65c1\u90e8\u9996", 479, "Python"], ["QANet_dureader", "https://github.com/SeanLee97/QANet_dureader", "QANet+DuReader\u4e2d\u6587\u673a\u5668\u9605\u8bfb\u7406\u89e3", 192, "Python"], ["nlp_learning", "https://github.com/SeanLee97/nlp_learning", "\u7ed3\u5408python\u4e00\u8d77\u5b66\u4e60\u81ea\u7136\u8bed\u8a00\u5904\u7406 (nlp): \u8bed\u8a00\u6a21\u578b\u3001HMM\u3001PCFG\u3001Word2vec\u3001\u5b8c\u5f62\u586b\u7a7a\u5f0f\u9605\u8bfb\u7406\u89e3\u4efb\u52a1\u3001\u6734\u7d20\u8d1d\u53f6\u65af\u5206\u7c7b\u5668\u3001TFIDF\u3001PCA\u3001SVD", 161, "Python"]]], ["User", "hhstore", "https://avatars3.githubusercontent.com/u/3252130?v=4", [["annotated-py-projects", "https://github.com/hhstore/annotated-py-projects", "flask/sanic/asyncio/bottle/webpy \u5927\u91cf\u9879\u76ee \u6e90\u7801\u9605\u8bfb\u6ce8\u91ca\u5408\u96c6", 276, "Python"]]], ["User", "BeginMan", "https://avatars0.githubusercontent.com/u/4414032?v=4", []], ["User", "PENGZhaoqing", "https://avatars0.githubusercontent.com/u/11887913?v=4", [["TimeSeriesPrediction", "https://github.com/PENGZhaoqing/TimeSeriesPrediction", "\u5929\u6c60\u667a\u6167\u4ea4\u901a\u9884\u6d4b\u6311\u6218\u8d5b\u89e3\u51b3\u65b9\u6848", 263, "Python"]]], ["User", "geektutu", "https://avatars2.githubusercontent.com/u/13294018?v=4", [["tensorflow-tutorial-samples", "https://github.com/geektutu/tensorflow-tutorial-samples", "TensorFlow2\u6559\u7a0b TensorFlow 2.0 Tutorial \u5165\u95e8\u6559\u7a0b\u5b9e\u6218\u6848\u4f8b", 248, "Python"]]], ["User", "5up3rc", "https://avatars1.githubusercontent.com/u/10895836?v=4", [["NagaScan", "https://github.com/5up3rc/NagaScan", "NagaScan is a distributed passive scanner for Web application.", 85, "Python"]]], ["User", "wzyonggege", "https://avatars1.githubusercontent.com/u/28620881?v=4", [["RNN_poetry_generator", "https://github.com/wzyonggege/RNN_poetry_generator", "\u57fa\u4e8eRNN\u751f\u6210\u53e4\u8bd7", 133, "Python"], ["python-wechat-itchat", "https://github.com/wzyonggege/python-wechat-itchat", null, 94, "Python"]]], ["User", "spytensor", "https://avatars3.githubusercontent.com/u/38940399?v=4", [["prepare_detection_dataset", "https://github.com/spytensor/prepare_detection_dataset", "convert dataset to coco/voc format", 330, "Python"], ["detect_steel_bar", "https://github.com/spytensor/detect_steel_bar", "CCFDF AI \u6570\u94a2\u7b4b\u5927\u8d5b", 151, "Python"], ["pytorch-image-classification", "https://github.com/spytensor/pytorch-image-classification", "use pytorch to do image classfiication tasks ", 142, "Python"], ["plants_disease_detection", "https://github.com/spytensor/plants_disease_detection", "Ai Challenger 2018 Competitions \u519c\u4f5c\u7269\u75c5\u5bb3\u68c0\u6d4b", 140, "Python"], ["kaggle_human_protein_baseline", "https://github.com/spytensor/kaggle_human_protein_baseline", "Human Protein Atlas Image Classification baseline:0.456", 81, "Python"]]], ["User", "rwv", "https://avatars1.githubusercontent.com/u/7891383?v=4", [["chinese-dos-games", "https://github.com/rwv/chinese-dos-games", "\ud83c\udfae Chinese DOS games in browser.", 5372, "Python"]]], ["User", "twz915", "https://avatars2.githubusercontent.com/u/5609468?v=4", []], ["User", "pangolulu", "https://avatars2.githubusercontent.com/u/5796671?v=4", [["rnn-from-scratch", "https://github.com/pangolulu/rnn-from-scratch", "Implementing Recurrent Neural Network from Scratch", 344, "Python"], ["neural-network-from-scratch", "https://github.com/pangolulu/neural-network-from-scratch", "Implementing Multiple Layer Neural Network from Scratch", 260, "Python"]]], ["User", "yongluo2013", "https://avatars3.githubusercontent.com/u/6010002?v=4", [["osf-openstack-training", "https://github.com/yongluo2013/osf-openstack-training", null, 178, "Python"]]], ["User", "buke", "https://avatars2.githubusercontent.com/u/1013738?v=4", [["GreenOdoo", "https://github.com/buke/GreenOdoo", "Portable Odoo (formerly OpenERP)", 134, "Python"], ["openerp-taobao", "https://github.com/buke/openerp-taobao", "Taobao OpenERP Connector", 126, "Python"]]], ["User", "nanshihui", "https://avatars0.githubusercontent.com/u/6913510?v=4", [["PocCollect", "https://github.com/nanshihui/PocCollect", "a plenty of poc based on python", 285, "Python"]]], ["User", "HuberTRoy", "https://avatars3.githubusercontent.com/u/10172415?v=4", [["leetCode", "https://github.com/HuberTRoy/leetCode", ":pencil2: \u7b97\u6cd5\u76f8\u5173\u77e5\u8bc6\u50a8\u5907 LeetCode with Python :books:", 1333, "Python"], ["MusicBox", "https://github.com/HuberTRoy/MusicBox", ":blush: :musical_note: MusicPlayer \u4e00\u7ad9\u5f0f\u6536\u542c\u591a\u5e73\u53f0\u97f3\u4e50(\u7f51\u6613\u4e91, \u867e\u7c73, QQ)\u7684\u8de8\u5e73\u53f0\u97f3\u4e50\u64ad\u653e\u5668\uff0c\u5c3d\u60c5\u4eab\u53d7\u5427~:sparkles:", 999, "Python"]]], ["User", "lxneng", "https://avatars1.githubusercontent.com/u/112606?v=4", [["xpinyin", "https://github.com/lxneng/xpinyin", "translate chinese hanzi to pinyin by python", 668, "Python"], ["alipay", "https://github.com/lxneng/alipay", "An Unofficial Alipay API for Python", 319, "Python"]]], ["User", "Wh0ale", "https://avatars1.githubusercontent.com/u/44937351?v=4", [["SRC-experience", "https://github.com/Wh0ale/SRC-experience", "\u5de5\u6b32\u5584\u5176\u4e8b\uff0c\u5fc5\u5148\u5229\u5176\u5668", 537, "Python"], ["SRC-script", "https://github.com/Wh0ale/SRC-script", "\u6316\u6398src\u5e38\u7528\u811a\u672c", 256, "Python"]]], ["User", "xiaochus", "https://avatars2.githubusercontent.com/u/16798444?v=4", [["YOLOv3", "https://github.com/xiaochus/YOLOv3", "Keras implementation of yolo v3 object detection.", 533, "Python"], ["MobileNetV2", "https://github.com/xiaochus/MobileNetV2", "A Keras implementation of MobileNetV2.", 231, "Python"], ["TrafficFlowPrediction", "https://github.com/xiaochus/TrafficFlowPrediction", "Traffic Flow Prediction with Neural Networks(SAEs\u3001LSTM\u3001GRU).", 156, "Python"], ["MobileNetV3", "https://github.com/xiaochus/MobileNetV3", "A Keras implementation of MobileNetV3.", 112, "Python"]]], ["User", "shonenada", "https://avatars1.githubusercontent.com/u/2056489?v=4", [["flask-rbac", "https://github.com/shonenada/flask-rbac", "Flask-RBAC", 170, "Python"]]], ["User", "gumblex", "https://avatars0.githubusercontent.com/u/6681934?v=4", [["ptproxy", "https://github.com/gumblex/ptproxy", "Turn any pluggable transport for Tor into an obfuscating TCP tunnel.", 142, "Python"], ["zhconv", "https://github.com/gumblex/zhconv", "Simple conversion and localization between simplified and traditional Chinese using tables from MediaWiki.", 108, "Python"], ["wqxt_pdf", "https://github.com/gumblex/wqxt_pdf", "WQXT PDF Downloader", 101, "Python"]]], ["User", "poodarchu", "https://avatars3.githubusercontent.com/u/11813362?v=4", [["Det3D", "https://github.com/poodarchu/Det3D", "A general 3D object detection codebse.", 586, "Python"]]], ["User", "Tramac", "https://avatars0.githubusercontent.com/u/22740819?v=4", [["awesome-semantic-segmentation-pytorch", "https://github.com/Tramac/awesome-semantic-segmentation-pytorch", "Semantic Segmentation on PyTorch (include FCN, PSPNet, Deeplabv3, Deeplabv3+, DANet, DenseASPP, BiSeNet, EncNet, DUNet, ICNet, ENet, OCNet, CCNet, PSANet, CGNet, ESPNet, LEDNet, DFANet)", 921, "Python"], ["Lightweight-Segmentation", "https://github.com/Tramac/Lightweight-Segmentation", "Lightweight models for real-time semantic segmentation(include mobilenetv1-v3, shufflenetv1-v2, igcv3, efficientnet).", 186, "Python"], ["Fast-SCNN-pytorch", "https://github.com/Tramac/Fast-SCNN-pytorch", "A PyTorch Implementation of Fast-SCNN: Fast Semantic Segmentation Network", 146, "Python"]]], ["User", "WarBean", "https://avatars2.githubusercontent.com/u/5501392?v=4", [["tps_stn_pytorch", "https://github.com/WarBean/tps_stn_pytorch", "PyTorch implementation of Spatial Transformer Network (STN) with Thin Plate Spline (TPS)", 491, "Python"]]], ["User", "roxma", "https://avatars0.githubusercontent.com/u/4538941?v=4", [["nvim-completion-manager", "https://github.com/roxma/nvim-completion-manager", ":warning: PLEASE USE https://github.com/ncm2/ncm2 INSTEAD", 967, "Python"], ["vim-hug-neovim-rpc", "https://github.com/roxma/vim-hug-neovim-rpc", "EXPERIMENTAL", 168, "Python"]]], ["User", "rockyzhengwu", "https://avatars0.githubusercontent.com/u/10402091?v=4", [["FoolNLTK", "https://github.com/rockyzhengwu/FoolNLTK", "A Chinese Nature Language Toolkit", 1456, "Python"], ["nsfw", "https://github.com/rockyzhengwu/nsfw", "Suitable for Work (NSFW) classification", 429, "Python"]]], ["User", "cloudaice", "https://avatars1.githubusercontent.com/u/747028?v=4", [["simple-data", "https://github.com/cloudaice/simple-data", "make data simple", 95, "Python"]]], ["User", "jasonding1354", "https://avatars1.githubusercontent.com/u/5493159?v=4", [["pyDataScienceToolkits_Base", "https://github.com/jasonding1354/pyDataScienceToolkits_Base", "\u4f7f\u7528Python\u8fdb\u884c\u6570\u636e\u5206\u6790\u5b9e\u9a8c\u5de5\u5177NumPy\u3001Pandas\u3001Matplotlib\u3001Scikit-learn\u7684\u5165\u95e8\u4ecb\u7ecd\uff0c\u4f7f\u7528IPython Notebook\u683c\u5f0f", 319, "Python"]]], ["User", "onesuper", "https://avatars1.githubusercontent.com/u/977633?v=4", [["pandasticsearch", "https://github.com/onesuper/pandasticsearch", "An Elasticsearch client exposing DataFrame API", 215, "Python"]]], ["User", "thsheep", "https://avatars1.githubusercontent.com/u/13295079?v=4", [["scrapy_redis_cluster", "https://github.com/thsheep/scrapy_redis_cluster", "scrapy-redis\u7684\u96c6\u7fa4\u7248\uff0c\u53ef\u4ee5\u501f\u52a9Redis\u96c6\u7fa4\u5b9e\u73b0\u6d77\u91cf\u7f51\u7ad9\u7684\u72ec\u7acb\u53bb\u91cd\uff0c\u907f\u514d\u5355\u673a\u5185\u5b58\u4e0d\u8db3\u7684\u5c34\u5c2c", 113, "Python"]]], ["User", "hrwhisper", "https://avatars2.githubusercontent.com/u/10042217?v=4", [["algorithm_course", "https://github.com/hrwhisper/algorithm_course", "\u56fd\u79d1\u5927 \u7b97\u6cd5\u5206\u6790\u4e0e\u8bbe\u8ba1 \u535c\u4e1c\u6ce2 \u4f5c\u4e1a\u7b54\u6848\u6574\u7406(2016)", 157, "Python"], ["twitterDataMining", "https://github.com/hrwhisper/twitterDataMining", "Twitter\u6570\u636e\u6316\u6398\u53ca\u5176\u53ef\u89c6\u5316", 117, "Python"], ["SpamMessage", "https://github.com/hrwhisper/SpamMessage", "\u4e2d\u6587\u5783\u573e\u77ed\u4fe1\u8bc6\u522b(\u624b\u5199\u5206\u7c7b\u5668)", 89, "Python"]]], ["User", "SunnyMarkLiu", "https://avatars0.githubusercontent.com/u/16421565?v=4", [["Naive_Bayes_Meet_Adaboost", "https://github.com/SunnyMarkLiu/Naive_Bayes_Meet_Adaboost", ":email: Implement Naive Bayes and Adaboost from scratch and use them to filter spam emails.", 140, "Python"]]], ["User", "JoneXiong", "https://avatars0.githubusercontent.com/u/2276625?v=4", [["oejia_wx", "https://github.com/JoneXiong/oejia_wx", "Odoo \u7684\u5fae\u4fe1\u6a21\u5757  Wechat module for Odoo", 420, "Python"], ["oejia_weshop", "https://github.com/JoneXiong/oejia_weshop", "odoo \u5fae\u4fe1\u5c0f\u7a0b\u5e8f\u5546\u57ce\u6a21\u5757  (WeChat Mini Program for Odoo)", 176, "Python"], ["YouPBX", "https://github.com/JoneXiong/YouPBX", "A great GUI manager for FreeSwitch", 160, "Python"]]], ["User", "lieanu", "https://avatars2.githubusercontent.com/u/3104641?v=4", []], ["User", "fengxuangit", "https://avatars2.githubusercontent.com/u/9276329?v=4", [["Fox-scan", "https://github.com/fengxuangit/Fox-scan", "Fox-scan is a initiative and passive SQL Injection vulnerable Test tools.", 348, "Python"], ["dede_exp_collect", "https://github.com/fengxuangit/dede_exp_collect", "collection dedecms exp use pocsuite framework \u6536\u96c6\u7ec7\u68a6\u7684\u4e00\u4e9b\u6f0f\u6d1e\uff0c\u5e76\u7528pocsuite\u6846\u67b6\u5199\u51fa\u5229\u7528\u7a0b\u5e8f\u3002\u6253\u9020\u4e00\u952e\u65e5dede", 124, "Python"]]], ["User", "lalor", "https://avatars2.githubusercontent.com/u/1710494?v=4", [["todolist", "https://github.com/lalor/todolist", null, 325, "Python"], ["python_for_linux_system_administration", "https://github.com/lalor/python_for_linux_system_administration", null, 253, "Python"], ["headlines", "https://github.com/lalor/headlines", null, 191, "Python"]]], ["User", "huhamhire", "https://avatars2.githubusercontent.com/u/1697264?v=4", [["huhamhire-hosts", "https://github.com/huhamhire/huhamhire-hosts", "hosts for Internet Freedom", 1478, "Python"]]], ["User", "felinx", "https://avatars2.githubusercontent.com/u/127191?v=4", [["d3status", "https://github.com/felinx/d3status", "Diablo3 server status notification APP, a RESTful API demo powered by Tornado", 196, "Python"]]], ["User", "ZhangBohan", "https://avatars0.githubusercontent.com/u/2317407?v=4", [["fun_crawler", "https://github.com/ZhangBohan/fun_crawler", "Crawl some picture for fun", 169, "Python"]]], ["User", "LKI", "https://avatars0.githubusercontent.com/u/3286092?v=4", [["chinese-calendar", "https://github.com/LKI/chinese-calendar", "\u5224\u65ad\u4e00\u5929\u662f\u4e0d\u662f\u6cd5\u5b9a\u8282\u5047\u65e5/\u6cd5\u5b9a\u5de5\u4f5c\u65e5\uff08\u67e5\u770b\u8282\u5047\u65e5\u5b89\u6392\uff09", 257, "Python"]]], ["User", "pengyao", "https://avatars3.githubusercontent.com/u/919816?v=4", [["salt-zabbix", "https://github.com/pengyao/salt-zabbix", "\u57fa\u4e8esaltstack,\u7ed3\u5408zabbix\u5b8c\u6210\u670d\u52a1\u81ea\u52a8\u5316\u90e8\u7f72\u53ca\u76d1\u63a7", 100, "Python"]]], ["User", "doraemonext", "https://avatars3.githubusercontent.com/u/4290737?v=4", [["wechat-python-sdk", "https://github.com/doraemonext/wechat-python-sdk", "\u5fae\u4fe1\u516c\u4f17\u5e73\u53f0 Python \u5f00\u53d1\u5305 [DEPRECATED]", 1389, "Python"]]], ["User", "SeaHOH", "https://avatars1.githubusercontent.com/u/8470820?v=4", [["GotoX", "https://github.com/SeaHOH/GotoX", "\u672c\u5730\u81ea\u52a8\u4ee3\u7406\uff0c\u4fee\u6539\u81ea goagent\u3002", 221, "Python"]]], ["User", "zhaoyingjun", "https://avatars2.githubusercontent.com/u/12986443?v=4", [["chatbot", "https://github.com/zhaoyingjun/chatbot", "\u4e00\u4e2a\u53ef\u4ee5\u81ea\u5df1\u8fdb\u884c\u8bad\u7ec3\u7684\u4e2d\u6587\u804a\u5929\u673a\u5668\u4eba\uff0c \u6839\u636e\u81ea\u5df1\u7684\u8bed\u6599\u8bad\u7ec3\u51fa\u81ea\u5df1\u60f3\u8981\u7684\u804a\u5929\u673a\u5668\u4eba\uff0c\u53ef\u4ee5\u7528\u4e8e\u667a\u80fd\u5ba2\u670d\u3001\u5728\u7ebf\u95ee\u7b54\u3001\u667a\u80fd\u804a\u5929\u7b49\u573a\u666f\u3002\u76ee\u524d\u5305\u542bseq2seq\u3001seqGAN\u7248\u672c\u548ctf2.0\u7248\u672c\u3002", 1363, "Python"], ["TensorFlow-Coding", "https://github.com/zhaoyingjun/TensorFlow-Coding", "\u8fd9\u662f\u6211\u5728\u5c0f\u8c61\u5b66\u9662\u8bfe\u7a0b\u300a\u6df1\u5ea6\u5b66\u4e60\u4e4bTensorFlow\u9ad8\u7ea7\u7f16\u7a0b\u300b\u7684\u8bfe\u7a0b\u4ee3\u7801", 87, "Python"]]], ["User", "adieu", "https://avatars1.githubusercontent.com/u/17115?v=4", []], ["User", "finlay-liu", "https://avatars0.githubusercontent.com/u/10354204?v=4", []], ["User", "ltoddy", "https://avatars0.githubusercontent.com/u/20920763?v=4", []], ["User", "zhanghe06", "https://avatars0.githubusercontent.com/u/8669309?v=4", [["python", "https://github.com/zhanghe06/python", "Python\u4f7f\u7528\u8bb0\u5f55", 446, "Python"], ["news_spider", "https://github.com/zhanghe06/news_spider", "\u65b0\u95fb\u6293\u53d6\uff08\u5fae\u4fe1\u3001\u5fae\u535a\u3001\u5934\u6761...\uff09", 159, "Python"]]], ["User", "grasses", "https://avatars0.githubusercontent.com/u/5513110?v=4", []], ["User", "caspartse", "https://avatars3.githubusercontent.com/u/2293538?v=4", [["wechat-toolbox", "https://github.com/caspartse/wechat-toolbox", "WeChat toolbox\uff08\u5fae\u4fe1\u5de5\u5177\u7bb1\uff09", 99, "Python"]]], ["User", "chenzhiwei", "https://avatars2.githubusercontent.com/u/672668?v=4", [["linux", "https://github.com/chenzhiwei/linux", "Linux related notes.", 638, "Python"]]], ["User", "huangshiyu13", "https://avatars3.githubusercontent.com/u/14996449?v=4", [["RPNplus", "https://github.com/huangshiyu13/RPNplus", "RPN+(Tensorflow) for people detection", 190, "Python"]]], ["User", "TTyb", "https://avatars3.githubusercontent.com/u/20573808?v=4", [["Baiduindex", "https://github.com/TTyb/Baiduindex", "\u767e\u5ea6\u6307\u6570-\u56fe\u50cf\u8bc6\u522b\u6293\u53d6\uff0c\u903b\u8f91\u4e0d\u96be\uff0c\u4ee3\u7801\u5199\u5f97\u6e23\u6e23", 165, "Python"]]], ["User", "Leavingseason", "https://avatars3.githubusercontent.com/u/7477272?v=4", [["xDeepFM", "https://github.com/Leavingseason/xDeepFM", null, 475, "Python"], ["OpenLearning4DeepRecsys", "https://github.com/Leavingseason/OpenLearning4DeepRecsys", "Some deep learning based recsys for open learning.", 357, "Python"], ["rnn_recsys", "https://github.com/Leavingseason/rnn_recsys", "Our implementation of the paper \"Embedding-based News Recommendation for Millions of Users\"", 120, "Python"]]], ["User", "pengshuang", "https://avatars0.githubusercontent.com/u/11802795?v=4", [["Text-Similarity", "https://github.com/pengshuang/Text-Similarity", "Text-Similarity Method in Pytorch", 220, "Python"], ["AI-Comp", "https://github.com/pengshuang/AI-Comp", "AI-Challenger Baseline \u7ec6\u7c92\u5ea6\u7528\u6237\u8bc4\u8bba\u60c5\u611f\u5206\u6790", 184, "Python"]]], ["User", "gjy3035", "https://avatars3.githubusercontent.com/u/7986462?v=4", [["C-3-Framework", "https://github.com/gjy3035/C-3-Framework", "An open-source PyTorch code for crowd counting", 346, "Python"], ["GCC-SFCN", "https://github.com/gjy3035/GCC-SFCN", "This is the official code of spatial FCN in the paper Learning from Synthetic Data for Crowd Counting in the Wild [CVPR2019].", 124, "Python"]]], ["User", "giantbranch", "https://avatars1.githubusercontent.com/u/7982908?v=4", [["python-hacker-code", "https://github.com/giantbranch/python-hacker-code", "\u300apython\u9ed1\u5e3d\u5b50\uff1a\u9ed1\u5ba2\u4e0e\u6e17\u900f\u6d4b\u8bd5\u7f16\u7a0b\u4e4b\u9053\u300b\u4ee3\u7801\u53ca\u5b9e\u9a8c\u6587\u4ef6\uff0c\u5b57\u5178\u7b49", 270, "Python"], ["pwn_deploy_chroot", "https://github.com/giantbranch/pwn_deploy_chroot", "\u53ef\u4ee5\u65b9\u4fbf\u5730\u90e8\u7f72\u4e00\u4e2a\u6216\u8005\u591a\u4e2apwn\u9898\u5230\u4e00\u4e2adocker\u5bb9\u5668\u4e2d\uff08\u4f7f\u7528chroot\uff0c\u5e76\u53ef\u4ee5\u8bbe\u7f6e\u662f\u5426\u4f7f\u7528\u6211\u81ea\u5df1\u5199\u7684catflag\u7a0b\u5e8f\u66ff\u6362\u9ed8\u8ba4\u7684/bin/sh\u7a0b\u5e8f\uff0c\u4ee5\u589e\u52a0\u5b89\u5168\u6027\uff09", 99, "Python"]]], ["User", "maralla", "https://avatars3.githubusercontent.com/u/2238118?v=4", [["completor.vim", "https://github.com/maralla/completor.vim", "Async completion framework made ease.", 1075, "Python"], ["validator.vim", "https://github.com/maralla/validator.vim", "Check syntax on the fly asynchronously.", 204, "Python"]]], ["User", "liuslevis", "https://avatars2.githubusercontent.com/u/3361154?v=4", [["weiquncrawler", "https://github.com/liuslevis/weiquncrawler", "This is a crawler for Sina Weiqun website(WAP) information, including given Weiqun's posts, replies, users and their follow relation. Written in Python 2.7.1, store data in SQLite3. Relation-crawling part customized on Github Project sina_reptile.", 147, "Python"]]], ["User", "NKUCodingCat", "https://avatars2.githubusercontent.com/u/8611032?v=4", [["gogotester_python", "https://github.com/NKUCodingCat/gogotester_python", "Tools Powered by Python to Find available Google IP for Goagent and GoProxy", 81, "Python"]]], ["User", "corenel", "https://avatars3.githubusercontent.com/u/8099273?v=4", [["pytorch-adda", "https://github.com/corenel/pytorch-adda", "A PyTorch implementation for Adversarial Discriminative Domain Adaptation", 241, "Python"]]], ["User", "jumper2014", "https://avatars3.githubusercontent.com/u/9908796?v=4", [["lianjia-beike-spider", "https://github.com/jumper2014/lianjia-beike-spider", "\u94fe\u5bb6\u7f51\u548c\u8d1d\u58f3\u7f51\u623f\u4ef7\u722c\u866b\uff0c\u91c7\u96c6\u5317\u4eac\u4e0a\u6d77\u5e7f\u5dde\u6df1\u5733\u7b4921\u4e2a\u4e2d\u56fd\u4e3b\u8981\u57ce\u5e02\u7684\u623f\u4ef7\u6570\u636e\uff08\u5c0f\u533a\uff0c\u4e8c\u624b\u623f\uff0c\u51fa\u79df\u623f\uff0c\u65b0\u623f\uff09\uff0c\u7a33\u5b9a\u53ef\u9760\u5feb\u901f\uff01\u652f\u6301csv,MySQL, MongoDB,Excel, json\u5b58\u50a8\uff0c\u652f\u6301Python2\u548c3\uff0c\u56fe\u8868\u5c55\u793a\u6570\u636e\uff0c\u6ce8\u91ca\u4e30\u5bcc \ud83d\ude81\uff0c\u70b9\u661f\u652f\u6301", 1563, "Python"], ["PyCodeComplete", "https://github.com/jumper2014/PyCodeComplete", "Python\u5165\u95e8\u6559\u7a0b\uff0c\u77e5\u4e4e\u4e13\u680f\u300aPython\u5b9e\u8df5\u4e4b\u8def\u300b\u7684\u6587\u7ae0\u548c\u4ee3\u7801\u3002", 247, "Python"]]], ["User", "gangchen", "https://avatars0.githubusercontent.com/u/431516?v=4", []], ["User", "kulovecc", "https://avatars1.githubusercontent.com/u/8711418?v=4", [["jandan_spider", "https://github.com/kulovecc/jandan_spider", "\u4f7f\u7528Python3\u722c\u53d6\u714e\u86cb\u59b9\u7eb8\u56fe\u7247", 148, "Python"]]], ["User", "leeguandong", "https://avatars2.githubusercontent.com/u/23144950?v=4", [["Interview-code-practice-python", "https://github.com/leeguandong/Interview-code-practice-python", "\u9762\u8bd5\u9898", 1311, "Python"]]], ["User", "Sorosliu1029", "https://avatars1.githubusercontent.com/u/8862646?v=4", [["Jike-Metro", "https://github.com/Sorosliu1029/Jike-Metro", ":metro: \u5373\u523b \u24bf SDK", 154, "Python"]]], ["User", "0xffff0800", "https://avatars1.githubusercontent.com/u/45248457?v=4", [["muddyc3", "https://github.com/0xffff0800/muddyc3", "Leaked Muddyc3 C2 source.", 189, "Python"], ["MuddyC3v1.0.1-", "https://github.com/0xffff0800/MuddyC3v1.0.1-", "This is the MuddyWater APT C3 v1.0.1 Source ", 85, "Python"]]], ["User", "YCG09", "https://avatars1.githubusercontent.com/u/9940376?v=4", [["chinese_ocr", "https://github.com/YCG09/chinese_ocr", "CTPN + DenseNet + CTC based end-to-end Chinese OCR implemented using tensorflow and keras", 1923, "Python"]]], ["User", "upbit", "https://avatars2.githubusercontent.com/u/302680?v=4", [["pixivpy", "https://github.com/upbit/pixivpy", "Pixiv API for Python", 747, "Python"]]], ["User", "eecrazy", "https://avatars2.githubusercontent.com/u/3361588?v=4", [["ConstructingNEEG_IJCAI_2018", "https://github.com/eecrazy/ConstructingNEEG_IJCAI_2018", "The data and code for our IJCAI-ECAI 2018 paper: Constructing Narrative Event Evolutionary Graph for Script Event Prediction", 91, "Python"]]], ["User", "wcventure", "https://avatars0.githubusercontent.com/u/35592824?v=4", []], ["User", "WsmDyj", "https://avatars2.githubusercontent.com/u/37063069?v=4", []], ["User", "X-Mars", "https://avatars1.githubusercontent.com/u/18095822?v=4", [["Zabbix-Alert-WeChat", "https://github.com/X-Mars/Zabbix-Alert-WeChat", "zabbix Alert WeChat zabbix \u5fae\u4fe1 \u62a5\u8b66", 276, "Python"]]], ["User", "yanx27", "https://avatars0.githubusercontent.com/u/35829331?v=4", [["Pointnet_Pointnet2_pytorch", "https://github.com/yanx27/Pointnet_Pointnet2_pytorch", "PointNet and PointNet++ implemented by pytorch (pure python) and on ModelNet, ShapeNet and S3DIS.", 265, "Python"], ["3DGNN_pytorch", "https://github.com/yanx27/3DGNN_pytorch", "3D Graph Neural Networks for RGBD Semantic Segmentation", 128, "Python"]]], ["User", "felix021", "https://avatars2.githubusercontent.com/u/367085?v=4", []], ["User", "frostming", "https://avatars3.githubusercontent.com/u/16336606?v=4", [["legit", "https://github.com/frostming/legit", "Git for Humans, Inspired by GitHub for Mac\u2122.", 5562, "Python"], ["python-cfonts", "https://github.com/frostming/python-cfonts", "Sexy fonts for the console", 125, "Python"]]], ["User", "FortuneC00kie", "https://avatars0.githubusercontent.com/u/26539482?v=4", [["bug-monitor", "https://github.com/FortuneC00kie/bug-monitor", "Seebug\u3001structs\u3001cve\u6f0f\u6d1e\u5b9e\u65f6\u76d1\u63a7\u63a8\u9001\u7cfb\u7edf\ud83d\udd26", 236, "Python"]]], ["User", "ramsayleung", "https://avatars0.githubusercontent.com/u/14180681?v=4", [["jd_spider", "https://github.com/ramsayleung/jd_spider", "\u4e24\u53ea\u8822\u840c\u4eac\u4e1c\u7684\u5206\u5e03\u5f0f\u722c\u866b. ", 732, "Python"]]], ["User", "ManyFace", "https://avatars3.githubusercontent.com/u/13110852?v=4", [["ExtractDexFromOat", "https://github.com/ManyFace/ExtractDexFromOat", "This tool is used to extract dex files from oat file.", 130, "Python"]]], ["User", "tevino", "https://avatars1.githubusercontent.com/u/1027300?v=4", []], ["User", "Northxw", "https://avatars2.githubusercontent.com/u/38708989?v=4", [["Python3_WebSpider", "https://github.com/Northxw/Python3_WebSpider", "Python3 \u7f51\u7edc\u722c\u866b\u5b9e\u8df5\u96c6\u5408\u3002\u6d89\u53ca\u591a\u7c7b\u578b\u9a8c\u8bc1\u7801\u8bc6\u522b\u3001\u591a\u7c7b\u578b\u6a21\u62df\u767b\u9646\u3001\u591a\u7c7b\u578b\u53cd\u53cd\u722c\u63aa\u65bd\u3001APP\u6570\u636e\u6293\u53d6\u3001Scrapy\u6846\u67b6\u3001\u5206\u5e03\u5f0f\u722c\u866b\u7b49\u3002", 278, "Python"], ["Dianping", "https://github.com/Northxw/Dianping", "\u5927\u4f17\u70b9\u8bc4\u5e97\u94fa\u4fe1\u606f\u722c\u866b", 179, "Python"]]], ["User", "kyzhouhzau", "https://avatars1.githubusercontent.com/u/33114591?v=4", [["BERT-NER", "https://github.com/kyzhouhzau/BERT-NER", "Use Google's BERT for named entity recognition \uff08CoNLL-2003 as the dataset\uff09.", 803, "Python"]]], ["User", "weiaicunzai", "https://avatars2.githubusercontent.com/u/1770114?v=4", [["pytorch-cifar100", "https://github.com/weiaicunzai/pytorch-cifar100", "Practice on cifar100(ResNet, DenseNet, VGG, GoogleNet, InceptionV3, InceptionV4, Inception-ResNetv2, Xception, Resnet In Resnet, ResNext,ShuffleNet, ShuffleNetv2, MobileNet, MobileNetv2, SqueezeNet, NasNet, Residual Attention Network, SENet)", 787, "Python"], ["Bag_of_Tricks_for_Image_Classification_with_Convolutional_Neural_Networks", "https://github.com/weiaicunzai/Bag_of_Tricks_for_Image_Classification_with_Convolutional_Neural_Networks", "experiments on Paper <Bag of Tricks for Image Classification with Convolutional Neural Networks> and other useful tricks to improve CNN acc", 315, "Python"]]], ["User", "wubinzzu", "https://avatars3.githubusercontent.com/u/5253157?v=4", [["NeuRec", "https://github.com/wubinzzu/NeuRec", "Next RecSys Library", 468, "Python"]]], ["User", "HelenMao", "https://avatars3.githubusercontent.com/u/17196207?v=4", [["MSGAN", "https://github.com/HelenMao/MSGAN", "MSGAN: Mode Seeking Generative Adversarial Networks for Diverse Image Synthesis (CVPR2019)", 300, "Python"]]], ["User", "qiwihui", "https://avatars3.githubusercontent.com/u/3297411?v=4", [["reinforcement-learning-an-introduction-chinese", "https://github.com/qiwihui/reinforcement-learning-an-introduction-chinese", "\u300aReinforcement Learning: An Introduction\u300b\uff08\u7b2c\u4e8c\u7248\uff09\u4e2d\u6587\u7ffb\u8bd1", 113, "Python"]]], ["User", "NoviceLive", "https://avatars0.githubusercontent.com/u/7678237?v=4", [["bintut", "https://github.com/NoviceLive/bintut", "Teach you a binary exploitation for great good.", 284, "Python"]]], ["User", "Windsooon", "https://avatars2.githubusercontent.com/u/14333046?v=4", [["cherry", "https://github.com/Windsooon/cherry", "text classification - no machine learning knowledge needed", 428, "Python"]]], ["User", "guoylyy", "https://avatars1.githubusercontent.com/u/3021588?v=4", [["uband-python-s1", "https://github.com/guoylyy/uband-python-s1", null, 139, "Python"]]], ["User", "lzane", "https://avatars3.githubusercontent.com/u/12814398?v=4", [["Fingers-Detection-using-OpenCV-and-Python", "https://github.com/lzane/Fingers-Detection-using-OpenCV-and-Python", "A simple Fingers Detection (or Gesture Recognition) using OpenCV and Python with background substraction \u7b80\u5355\u624b\u52bf\u8bc6\u522b", 264, "Python"]]], ["User", "jasonlvhit", "https://avatars0.githubusercontent.com/u/5202391?v=4", []], ["User", "tolerious", "https://avatars0.githubusercontent.com/u/2922120?v=4", []], ["User", "ZYSzys", "https://avatars1.githubusercontent.com/u/23313266?v=4", []], ["User", "nilboy", "https://avatars2.githubusercontent.com/u/17962699?v=4", [["tensorflow-yolo", "https://github.com/nilboy/tensorflow-yolo", "tensorflow implementation of 'YOLO : Real-Time Object Detection'(train and test)", 789, "Python"], ["pixel-recursive-super-resolution", "https://github.com/nilboy/pixel-recursive-super-resolution", "Tensorflow implementation of pixel-recursive-super-resolution(Google Brain paper: https://arxiv.org/abs/1702.00783)", 354, "Python"]]], ["User", "hequan2017", "https://avatars0.githubusercontent.com/u/20440940?v=4", [["autoops", "https://github.com/hequan2017/autoops", "linux\u8d44\u4ea7\u7ba1\u7406,cmdb,django, webssh,\u8fd0\u7ef4\u7ba1\u7406\u5e73\u53f0\uff0c\u6570\u636e\u5e93\u64cd\u4f5c\u5e73\u53f0   \u672c\u9879\u76ee\u5df2\u505c\u6b62\u5f00\u53d1\uff01\u56e0\u957f\u65f6\u95f4\u672a\u5bf9\u4ee3\u7801\u8fdb\u884c\u7ef4\u62a4\uff0c\u53ef\u80fd\u4f1a\u9020\u6210\u9879\u76ee\u5728\u4e0d\u540c\u73af\u5883\u4e0a\u65e0\u6cd5\u90e8\u7f72\u3001\u8fd0\u884cBUG\u7b49\u95ee\u9898\uff0c\u8bf7\u77e5\u6653\uff01\u9879\u76ee\u4ec5\u4f9b\u53c2\u8003\uff01", 325, "Python"], ["chain", "https://github.com/hequan2017/chain", "\u94fe\u55b5 CMDB   \u672c\u9879\u76ee\u5df2\u505c\u6b62\u5f00\u53d1\uff01\u56e0\u957f\u65f6\u95f4\u672a\u5bf9\u4ee3\u7801\u8fdb\u884c\u7ef4\u62a4\uff0c\u53ef\u80fd\u4f1a\u9020\u6210\u9879\u76ee\u5728\u4e0d\u540c\u73af\u5883\u4e0a\u65e0\u6cd5\u90e8\u7f72\u3001\u8fd0\u884cBUG\u7b49\u95ee\u9898\uff0c\u8bf7\u77e5\u6653\uff01\u9879\u76ee\u4ec5\u4f9b\u53c2\u8003\uff01", 231, "Python"], ["cmdb", "https://github.com/hequan2017/cmdb", "\u8d44\u4ea7\u7ba1\u7406\u3001\u4e3b\u673a\u7ba1\u7406\u3001\u6279\u91cf\u6267\u884c\u547d\u4ee4|\u811a\u672c\u3001\u6d41\u91cf\u56fe\u3001webssh    \u672c\u9879\u76ee\u5df2\u505c\u6b62\u5f00\u53d1\uff01\u56e0\u957f\u65f6\u95f4\u672a\u5bf9\u4ee3\u7801\u8fdb\u884c\u7ef4\u62a4\uff0c\u53ef\u80fd\u4f1a\u9020\u6210\u9879\u76ee\u5728\u4e0d\u540c\u73af\u5883\u4e0a\u65e0\u6cd5\u90e8\u7f72\u3001\u8fd0\u884cBUG\u7b49\u95ee\u9898\uff0c\u8bf7\u77e5\u6653\uff01\u9879\u76ee\u4ec5\u4f9b\u53c2\u8003\uff01", 116, "Python"], ["seal", "https://github.com/hequan2017/seal", "django-base-templates \u4e3b\u8981\u4e3a django \u5f00\u53d1DEMO, \u652f\u6301 \u975e\u524d\u540e\u7aef\u5206\u79bb \u548c \u524d\u540e\u7aef\u5206\u79bb\u6a21\u5f0f \u3002", 84, "Python"]]], ["User", "wangqingbaidu", "https://avatars1.githubusercontent.com/u/5063297?v=4", [["Dr.Sure", "https://github.com/wangqingbaidu/Dr.Sure", "\ud83c\udfebDeepLearning\u5b66\u4e60\u7b14\u8bb0\u4ee5\u53caTensorflow\u3001Pytorch\u7684\u4f7f\u7528\u5fc3\u5f97\u7b14\u8bb0\u3002Dr. Sure\u4f1a\u4e0d\u5b9a\u65f6\u5f80\u9879\u76ee\u4e2d\u6dfb\u52a0\u4ed6\u770b\u5230\u7684\u6700\u65b0\u7684\u6280\u672f\uff0c\u6b22\u8fce\u6279\u8bc4\u6307\u6b63\u3002", 298, "Python"], ["aliMusic", "https://github.com/wangqingbaidu/aliMusic", "\ud83c\udfbc\u5929\u6c60\u963f\u91cc\u97f3\u4e50\u6d41\u884c\u8d8b\u52bf\u9884\u6d4b\u5927\u8d5b\uff0c\u9879\u76ee\u4e2d\u6db5\u76d6\u4e86\u4ece\u521d\u8d5b\u5230\u590d\u8d5b\u7684\u5168\u90e8\u6838\u5fc3\u4ee3\u7801\u3002\u590d\u8d5b\u7684\u805a\u5408\u6570\u636e\u53ef\u4ee5\u5728\u767e\u5ea6\u7f51\u76d8\u4e0b\u8f7d\uff0c\u66f4\u8be6\u7ec6\u7684\u601d\u8def\u4ecb\u7ecd\u6b22\u8fce\u8bbf\u95ee\u6211\u7684\u535a\u5ba2\u3002", 142, "Python"]]], ["User", "zthxxx", "https://avatars3.githubusercontent.com/u/15135943?v=4", [["python-Speech_Recognition", "https://github.com/zthxxx/python-Speech_Recognition", "A simple example for use speech recognition baidu api with python.", 97, "Python"]]], ["User", "karldoenitz", "https://avatars2.githubusercontent.com/u/7512821?v=4", [["karlooper", "https://github.com/karldoenitz/karlooper", "python micro-framework", 133, "Python"]]], ["User", "winkidney", "https://avatars1.githubusercontent.com/u/4109722?v=4", [["weixin2py", "https://github.com/winkidney/weixin2py", "weixin2py-\u817e\u8baf\u5fae\u4fe1\u516c\u4f17\u5e73\u53f0\u81ea\u52a8\u6d88\u606f\u5904\u7406\u7a0b\u5e8f+SDK\uff08python+django\uff09", 130, "Python"]]], ["User", "sweetice", "https://avatars1.githubusercontent.com/u/17249055?v=4", [["Deep-reinforcement-learning-with-pytorch", "https://github.com/sweetice/Deep-reinforcement-learning-with-pytorch", "PyTorch implementation of DQN, AC,  ACER, A2C, A3C, PG,  DDPG, TRPO, PPO, SAC, TD3 and ....", 716, "Python"]]], ["User", "blackgear", "https://avatars1.githubusercontent.com/u/4780199?v=4", []], ["User", "zkqiang", "https://avatars3.githubusercontent.com/u/32983588?v=4", [["zhihu-login", "https://github.com/zkqiang/zhihu-login", "\u77e5\u4e4e\u6a21\u62df\u767b\u5f55\uff0c\u722c\u866b\u4e13\u7528\uff0c\u652f\u6301\u9a8c\u8bc1\u7801\u548c\u4fdd\u5b58 Cookies", 254, "Python"]]], ["User", "agiledragon", "https://avatars3.githubusercontent.com/u/18605510?v=4", []], ["User", "yinhm", "https://avatars1.githubusercontent.com/u/14960?v=4", [["datafeed", "https://github.com/yinhm/datafeed", "A Datafeed System for Financial Data.", 126, "Python"]]], ["User", "billvsme", "https://avatars1.githubusercontent.com/u/3324744?v=4", [["videoSpider", "https://github.com/billvsme/videoSpider", "\u6293\u53d6\u8c46\u74e3\uff0cbilibili\u7b49\u4e2d\u7684\u7535\u89c6\u5267\u3001\u7535\u5f71\u3001\u52a8\u6f2b\u6f14\u5458\u7b49\u4fe1\u606f", 178, "Python"]]], ["User", "crown-prince", "https://avatars3.githubusercontent.com/u/18098230?v=4", [["Python_PoC", "https://github.com/crown-prince/Python_PoC", "\u4e00\u6b3epython\u7f16\u5199\u7684Web\u5b89\u5168\u68c0\u6d4bPoC&&EXP\u6846\u67b6", 188, "Python"]]], ["User", "n0b0dyCN", "https://avatars2.githubusercontent.com/u/12966475?v=4", []], ["User", "RitterHou", "https://avatars0.githubusercontent.com/u/11351442?v=4", [["music-163", "https://github.com/RitterHou/music-163", "\u722c\u53d6\u7f51\u6613\u4e91\u97f3\u4e50\u6240\u6709\u6b4c\u66f2\u7684\u8bc4\u8bba\u6570", 258, "Python"]]], ["User", "petronny", "https://avatars0.githubusercontent.com/u/5357170?v=4", []], ["User", "Jackeriss", "https://avatars0.githubusercontent.com/u/7183428?v=4", [["Email_My_PC", "https://github.com/Jackeriss/Email_My_PC", "\u8fdc\u7a0b\u76d1\u63a7\u7535\u8111\uff0c\u4e5f\u8bb8\u4e00\u5207\u53ea\u9700\u8981\u4e00\u5c01\u90ae\u4ef6\u3002", 223, "Python"]]], ["User", "danfengcao", "https://avatars3.githubusercontent.com/u/5688262?v=4", [["binlog2sql", "https://github.com/danfengcao/binlog2sql", "Parse MySQL binlog to SQL you want", 1626, "Python"]]], ["User", "InsaneLife", "https://avatars2.githubusercontent.com/u/12445964?v=4", [["ChineseNLPCorpus", "https://github.com/InsaneLife/ChineseNLPCorpus", "\u4e2d\u6587\u81ea\u7136\u8bed\u8a00\u5904\u7406\u6570\u636e\u96c6\uff0c\u5e73\u65f6\u505a\u505a\u5b9e\u9a8c\u7684\u6750\u6599\u3002\u6b22\u8fce\u8865\u5145\u63d0\u4ea4\u5408\u5e76\u3002", 1111, "Python"], ["dssm", "https://github.com/InsaneLife/dssm", "DSSM and Multi-View DSSM", 328, "Python"], ["MyPicture", "https://github.com/InsaneLife/MyPicture", "Picture of my blog or project", 82, "Python"]]], ["User", "renjunxiang", "https://avatars0.githubusercontent.com/u/34116367?v=4", [["Text-Classification", "https://github.com/renjunxiang/Text-Classification", "\u81ea\u7136\u8bed\u8a00\u5904\u7406\u9879\u76ee\uff0c\u76ee\u6807\u662f\u5bf9\u6587\u672c\u8fdb\u884c\u5206\u7c7b\u3002", 173, "Python"], ["Competition_CAIL", "https://github.com/renjunxiang/Competition_CAIL", "2018\u4e2d\u56fd\u2018\u6cd5\u7814\u676f\u2019\u6cd5\u5f8b\u667a\u80fd\u6311\u6218\u8d5b\uff08CAIL2018\uff09\u4e2a\u4eba\u4f5c\u54c1", 121, "Python"]]], ["User", "Wildog", "https://avatars1.githubusercontent.com/u/4702071?v=4", [["douban-exporter", "https://github.com/Wildog/douban-exporter", "An online service to export \u8c46\u74e3 (douban) data to Excel files.", 181, "Python"], ["Ariafred", "https://github.com/Wildog/Ariafred", "Manage Aria2 downloads with Alfred", 159, "Python"]]], ["User", "kaito-kidd", "https://avatars0.githubusercontent.com/u/9117028?v=4", [["markdown-image-alfred", "https://github.com/kaito-kidd/markdown-image-alfred", "\u590d\u5236\u672c\u5730\u56fe\u7247\u6216\u622a\u56fe\uff0c\u5feb\u901f\u4e0a\u4f20\u56fe\u7247\u5230\u4e03\u725b\u4e91\u7a7a\u95f4\uff0c\u5e76\u83b7\u53d6Markdown\u683c\u5f0f\u7684\u56fe\u7247\u5730\u5740\u3002", 83, "Python"]]], ["User", "moneyDboat", "https://avatars1.githubusercontent.com/u/11391316?v=4", [["wechat_jump_jump", "https://github.com/moneyDboat/wechat_jump_jump", "\u7528Python+Opencv\u8ba9\u7535\u8111\u5e2e\u4f60\u81ea\u52a8\u73a9\u5fae\u4fe1\u8df3\u4e00\u8df3", 266, "Python"], ["data_grand", "https://github.com/moneyDboat/data_grand", "2018\u8fbe\u89c2\u676f\u6587\u672c\u667a\u80fd\u5904\u7406\u6311\u6218\u8d5b Top10\u89e3\u51b3\u65b9\u6848\uff0810/3830\uff09", 189, "Python"]]], ["User", "tmpbook", "https://avatars3.githubusercontent.com/u/1560985?v=4", []], ["User", "aipengjie", "https://avatars0.githubusercontent.com/u/13042405?v=4", [["sensitivefilescan", "https://github.com/aipengjie/sensitivefilescan", null, 150, "Python"]]], ["User", "shartoo", "https://avatars0.githubusercontent.com/u/5716282?v=4", [["luna16_multi_size_3dcnn", "https://github.com/shartoo/luna16_multi_size_3dcnn", "An implement of paper \"Multi-level Contextual 3D CNNs for False Positive Reduction in Pulmonary Nodule Detection\"", 90, "Python"]]], ["User", "ruiminshen", "https://avatars3.githubusercontent.com/u/8234244?v=4", [["yolo2-pytorch", "https://github.com/ruiminshen/yolo2-pytorch", "PyTorch implementation of the YOLO (You Only Look Once) v2", 417, "Python"], ["yolo-tf", "https://github.com/ruiminshen/yolo-tf", "TensorFlow implementation of the YOLO (You Only Look Once)", 199, "Python"]]], ["User", "Sierkinhane", "https://avatars2.githubusercontent.com/u/41798797?v=4", [["crnn_chinese_characters_rec", "https://github.com/Sierkinhane/crnn_chinese_characters_rec", "chinese characters recognition", 867, "Python"], ["CS229-ML-Implements", "https://github.com/Sierkinhane/CS229-ML-Implements", "Implements of cs229(Machine Learning taught by Andrew Ng) in python.", 196, "Python"], ["mtcnn-pytorch", "https://github.com/Sierkinhane/mtcnn-pytorch", "A face detection algorithm", 188, "Python"]]], ["User", "wmathor", "https://avatars2.githubusercontent.com/u/32392878?v=4", []], ["User", "Jackiexiao", "https://avatars2.githubusercontent.com/u/18050469?v=4", [["MTTS", "https://github.com/Jackiexiao/MTTS", "A Demo of Mandarin/Chinese TTS frontend", 181, "Python"]]], ["User", "spin6lock", "https://avatars0.githubusercontent.com/u/734304?v=4", []], ["User", "wangy8961", "https://avatars1.githubusercontent.com/u/20832248?v=4", [["python3-concurrency-pics-02", "https://github.com/wangy8961/python3-concurrency-pics-02", "\u722c\u53d6 www.mzitu.com \u5168\u7ad9\u56fe\u7247\uff0c\u622a\u81f3\u76ee\u524d\u51715162\u4e2a\u56fe\u96c6\uff0c16.5\u4e07\u591a\u5f20\u7f8e\u5973\u56fe\u7247\uff0c\u4f7f\u7528 asyncio \u548c aiohttp \u5b9e\u73b0\u7684\u5f02\u6b65\u7248\u672c\u53ea\u9700\u8981\u4e0d\u52302\u5c0f\u65f6\u5c31\u80fd\u722c\u53d6\u5b8c\u6210\u3002\u6309\u65e5\u671f\u521b\u5efa\u56fe\u96c6\u76ee\u5f55\uff0c\u4fdd\u5b58\u66f4\u5408\u7406\u3002\u63a7\u5236\u53f0\u53ea\u663e\u793a\u4e0b\u8f7d\u7684\u8fdb\u5ea6\u6761\uff0c\u8be6\u7ec6\u4fe1\u606f\u4fdd\u5b58\u5728\u65e5\u5fd7\u6587\u4ef6\u4e2d\u3002\u652f\u6301\u5f02\u5e38\u5904\u7406\uff0c\u4e0d\u4f1a\u7ec8\u6b62\u722c\u866b\u7a0b\u5e8f\u3002\u5931\u8d25\u7684\u8bf7\u6c42\uff0c\u4e0b\u6b21\u518d\u6267\u884c\u722c\u866b\u7a0b\u5e8f\u65f6\u4f1a\u81ea\u52a8\u4e0b\u8f7d", 215, "Python"]]], ["User", "jcyk", "https://avatars0.githubusercontent.com/u/11582128?v=4", [["greedyCWS", "https://github.com/jcyk/greedyCWS", "Source code for an ACL2017 paper on Chinese word segmentation", 88, "Python"], ["CWS", "https://github.com/jcyk/CWS", "Source code for an ACL2016 paper of Chinese word segmentation", 81, "Python"]]], ["User", "smilejay", "https://avatars1.githubusercontent.com/u/1243264?v=4", [["python", "https://github.com/smilejay/python", "some of Jay's shared python codes", 114, "Python"]]], ["User", "honmaple", "https://avatars1.githubusercontent.com/u/12235570?v=4", [["maple-bbs", "https://github.com/honmaple/maple-bbs", "a forums system based on flask", 430, "Python"], ["flask-msearch", "https://github.com/honmaple/flask-msearch", "Full text search for flask.", 133, "Python"], ["maple-blog", "https://github.com/honmaple/maple-blog", "a blog website based on flask ", 105, "Python"]]], ["User", "MTlab", "https://avatars3.githubusercontent.com/u/41577175?v=4", [["onnx2caffe", "https://github.com/MTlab/onnx2caffe", "pytorch to caffe by onnx", 180, "Python"]]], ["User", "smileboywtu", "https://avatars3.githubusercontent.com/u/12299551?v=4", [["MillionHeroAssistant", "https://github.com/smileboywtu/MillionHeroAssistant", "\u767e\u4e07 / \u51b2\u9876 / \u829d\u58eb / UC  / \u4e07\u80fd \u7b54\u9898\u52a9\u624b\uff08\u77e5\u8bc6\u56fe\u8c31\u66f4\u52a0\u4e13\u4e1a\uff0c\u81ea\u52a8\u63a8\u8350\u7b54\u6848\uff0c Android\u624b\u673a\u81ea\u52a8\u5c4f\u5e55\u9002\u914d\uff0c\u6a21\u62df\u5668\u652f\u6301\uff0c\u591a\u5f00)", 526, "Python"]]], ["User", "mattzheng", "https://avatars3.githubusercontent.com/u/27951628?v=4", [["DouBanRecommend", "https://github.com/mattzheng/DouBanRecommend", "\u57fa\u4e8e\u8c46\u74e3\u56fe\u4e66\u7684\u63a8\u8350\u3001\u77e5\u8bc6\u56fe\u8c31\u4e0e\u77e5\u8bc6\u5f15\u64ce\u7b80\u5355\u6784\u5efaneo4j", 113, "Python"]]], ["User", "restran", "https://avatars3.githubusercontent.com/u/2862915?v=4", [["fomalhaut", "https://github.com/restran/fomalhaut", "\ud83d\ude80 A Simple API Gateway for Building Security and Flexible Microservices.", 248, "Python"]]], ["User", "NeymarL", "https://avatars2.githubusercontent.com/u/12618657?v=4", [["ChineseChess-AlphaZero", "https://github.com/NeymarL/ChineseChess-AlphaZero", "Implement AlphaZero/AlphaGo Zero methods on Chinese chess.", 456, "Python"]]], ["User", "keakon", "https://avatars1.githubusercontent.com/u/1155229?v=4", []], ["User", "xsank", "https://avatars3.githubusercontent.com/u/1661334?v=4", []], ["User", "Shawn1993", "https://avatars0.githubusercontent.com/u/11707976?v=4", [["cnn-text-classification-pytorch", "https://github.com/Shawn1993/cnn-text-classification-pytorch", "CNNs for Sentence Classification in PyTorch", 712, "Python"]]], ["User", "damnever", "https://avatars3.githubusercontent.com/u/6223594?v=4", [["pigar", "https://github.com/damnever/pigar", ":coffee: A fantastic tool to generate requirements file for your Python project, and more than that.", 832, "Python"]]], ["User", "yxlijun", "https://avatars3.githubusercontent.com/u/15181339?v=4", [["S3FD.pytorch", "https://github.com/yxlijun/S3FD.pytorch", "SFD implement with pytorch", 162, "Python"], ["DSFD.pytorch", "https://github.com/yxlijun/DSFD.pytorch", "DSFD implement with pytorch", 134, "Python"], ["Pyramidbox.pytorch", "https://github.com/yxlijun/Pyramidbox.pytorch", "Pyramidbox implement with pytorch", 115, "Python"]]], ["User", "Duankaiwen", "https://avatars0.githubusercontent.com/u/29425864?v=4", [["CenterNet", "https://github.com/Duankaiwen/CenterNet", "Codes for our paper \"CenterNet: Keypoint Triplets for Object Detection\" . ", 1437, "Python"]]], ["User", "yuantailing", "https://avatars0.githubusercontent.com/u/8487114?v=4", [["ctw-baseline", "https://github.com/yuantailing/ctw-baseline", "Baseline methods for [CTW dataset](https://ctwdataset.github.io/)", 258, "Python"], ["tunet-python", "https://github.com/yuantailing/tunet-python", "TUNet 2018 \u8ba4\u8bc1\u534f\u8bae\u7684\u7eaf python \u5b9e\u73b0\uff0c\u542b auth4 / auth6 / net \u8ba4\u8bc1\u3002\u9002\u7528\u4e8e\u670d\u52a1\u5668\u5728\u65e0\u4eba\u4ea4\u4e92\u65f6\u81ea\u52a8\u8ba4\u8bc1\uff08\u5173\u952e\u8bcd net.tsinghua THU Auth \u6e05\u534e\u6821\u56ed\u7f51\uff09", 80, "Python"]]], ["User", "leeyiw", "https://avatars2.githubusercontent.com/u/3157740?v=4", [["cgdb-manual-in-chinese", "https://github.com/leeyiw/cgdb-manual-in-chinese", "\u300aCGDB\u4e2d\u6587\u624b\u518c\u300b", 189, "Python"]]], ["User", "solos", "https://avatars1.githubusercontent.com/u/542246?v=4", [["baidupan", "https://github.com/solos/baidupan", "A baidu netdisk api sdk", 172, "Python"]]], ["User", "CasiaFan", "https://avatars3.githubusercontent.com/u/10608984?v=4", [["time_seires_prediction_using_lstm", "https://github.com/CasiaFan/time_seires_prediction_using_lstm", "Time series prediction using LSTM classifier", 208, "Python"], ["Dataset_to_VOC_converter", "https://github.com/CasiaFan/Dataset_to_VOC_converter", "Scripts to convert datasets (Caltech pedestrian, MS COCO, HDA) to PASCAL VOC format", 136, "Python"], ["tensorflow_retinanet", "https://github.com/CasiaFan/tensorflow_retinanet", "RetinaNet with Focal Loss implemented by Tensorflow", 115, "Python"]]], ["User", "romangol", "https://avatars2.githubusercontent.com/u/616814?v=4", []], ["User", "huybery", "https://avatars0.githubusercontent.com/u/13436140?v=4", [["VisualizingCNN", "https://github.com/huybery/VisualizingCNN", " :see_no_evil:A PyTorch implementation of the 2014 ECCV paper \"Visualizing and Understanding Convolutional Networks\"", 96, "Python"]]], ["User", "nikoloss", "https://avatars0.githubusercontent.com/u/5944184?v=4", [["rose-dewdrop", "https://github.com/nikoloss/rose-dewdrop", "websocket\u6d88\u606f\u53d1\u5e03\u96c6\u7fa4 Rose&Dewdrop is a solution of websocket cluster", 115, "Python"], ["iceworld", "https://github.com/nikoloss/iceworld", "tonado\u7684multi-thread \u591a\u7ebf\u7a0b\u5c01\u88c5", 95, "Python"]]], ["User", "chengyumeng", "https://avatars1.githubusercontent.com/u/15684846?v=4", [["spider163", "https://github.com/chengyumeng/spider163", "\u6293\u53d6\u7f51\u6613\u4e91\u97f3\u4e50\u70ed\u95e8\u8bc4\u8bba", 545, "Python"]]], ["User", "Jessicamidi", "https://avatars1.githubusercontent.com/u/26340791?v=4", [["IJCAI17_Tianchi_Rank4", "https://github.com/Jessicamidi/IJCAI17_Tianchi_Rank4", null, 195, "Python"]]], ["User", "Vayn", "https://avatars1.githubusercontent.com/u/224407?v=4", []], ["User", "protream", "https://avatars0.githubusercontent.com/u/7698837?v=4", [["iquery", "https://github.com/protream/iquery", "Various information query via command line.", 731, "Python"]]], ["User", "yanwii", "https://avatars3.githubusercontent.com/u/15832673?v=4", [["dynamic-seq2seq", "https://github.com/yanwii/dynamic-seq2seq", "seq2seq\u4e2d\u6587\u804a\u5929\u673a\u5668\u4eba", 287, "Python"], ["seq2seq", "https://github.com/yanwii/seq2seq", "\u57fa\u4e8ePytorch\u7684\u4e2d\u6587\u804a\u5929\u673a\u5668\u4eba \u96c6\u6210BeamSearch\u7b97\u6cd5", 171, "Python"], ["msxiaoiceapi", "https://github.com/yanwii/msxiaoiceapi", "\u5fae\u8f6f\u5c0f\u51b0\u5fae\u535aapi msxiaoice weibo api", 104, "Python"], ["ChineseNER", "https://github.com/yanwii/ChineseNER", " \u57fa\u4e8eBi-GRU + CRF \u7684\u4e2d\u6587\u673a\u6784\u540d\u3001\u4eba\u540d\u8bc6\u522b, \u652f\u6301google bert\u6a21\u578b", 101, "Python"], ["ChinsesNER-pytorch", "https://github.com/yanwii/ChinsesNER-pytorch", "\u57fa\u4e8eBI-LSTM+CRF\u7684\u4e2d\u6587\u547d\u540d\u5b9e\u4f53\u8bc6\u522b Pytorch", 94, "Python"]]], ["User", "zqqf16", "https://avatars1.githubusercontent.com/u/655326?v=4", []], ["User", "wwq0327", "https://avatars1.githubusercontent.com/u/357507?v=4", [["django-web-app-book", "https://github.com/wwq0327/django-web-app-book", "Django Web \u5f00\u53d1\u5b9e\u6218", 91, "Python"]]], ["User", "jasonwbw", "https://avatars2.githubusercontent.com/u/3417170?v=4", [["DensityPeakCluster", "https://github.com/jasonwbw/DensityPeakCluster", "A cluster framework for 'Clustering by fast search and find of density peaks' in science 2014.", 211, "Python"]]], ["User", "jinyu121", "https://avatars2.githubusercontent.com/u/7346324?v=4", [["DW2TF", "https://github.com/jinyu121/DW2TF", "Darknet Weights to TensorFlow", 147, "Python"]]], ["User", "tangzixiang0304", "https://avatars1.githubusercontent.com/u/39323320?v=4", [["Shielded_detector", "https://github.com/tangzixiang0304/Shielded_detector", null, 591, "Python"]]], ["User", "tesseract2048", "https://avatars1.githubusercontent.com/u/4383952?v=4", []], ["User", "nick6918", "https://avatars3.githubusercontent.com/u/5869574?v=4", [["MyDeepLearning", "https://github.com/nick6918/MyDeepLearning", "A deep learning library to provide algs in pure Numpy or Tensorflow.", 266, "Python"]]], ["User", "Lapis-Hong", "https://avatars0.githubusercontent.com/u/23524486?v=4", [["wide_deep", "https://github.com/Lapis-Hong/wide_deep", "Wide and Deep Learning for CTR Prediction in tensorflow", 152, "Python"]]], ["User", "nooperpudd", "https://avatars0.githubusercontent.com/u/1549732?v=4", [["ctpwrapper", "https://github.com/nooperpudd/ctpwrapper", "\u4e0a\u6d77\u671f\u8d27\u4ea4\u6613\u6240CTP\u63a5\u53e3 Shanghai Future CTP Interface  CTP 6.3.15 Python API Wrapper", 186, "Python"], ["chinastock", "https://github.com/nooperpudd/chinastock", "chinastock \u4e2d\u56fd\u80a1\u7968\u884c\u60c5\uff0c\u6570\u636e", 155, "Python"]]], ["User", "jessemelpolio", "https://avatars2.githubusercontent.com/u/5879276?v=4", [["non-stationary_texture_syn", "https://github.com/jessemelpolio/non-stationary_texture_syn", "Code used for texture synthesis using GAN", 274, "Python"], ["Faster_RCNN_for_DOTA", "https://github.com/jessemelpolio/Faster_RCNN_for_DOTA", "Code used for training Faster R-CNN on DOTA", 242, "Python"]]], ["User", "xibijj", "https://avatars0.githubusercontent.com/u/8131156?v=4", []], ["User", "Qidian213", "https://avatars3.githubusercontent.com/u/15031441?v=4", [["deep_sort_yolov3", "https://github.com/Qidian213/deep_sort_yolov3", "Real-time Multi-person tracker using YOLO v3 and deep_sort with tensorflow ", 1126, "Python"]]], ["User", "imiyoo2010", "https://avatars2.githubusercontent.com/u/2367267?v=4", [["teye_scanner_for_book", "https://github.com/imiyoo2010/teye_scanner_for_book", "\u300a\u767d\u5e3d\u5b50\u8bb2Web\u626b\u63cf\u300b\u4e66\u7c4d\u53c2\u8003\u4ee3\u7801", 84, "Python"]]], ["User", "sowish", "https://avatars2.githubusercontent.com/u/8122929?v=4", [["LNScan", "https://github.com/sowish/LNScan", "\u8be6\u7ec6\u7684\u5185\u90e8\u7f51\u7edc\u4fe1\u606f\u626b\u63cf\u5668", 166, "Python"]]], ["User", "dylanninin", "https://avatars3.githubusercontent.com/u/550518?v=4", [["blog", "https://github.com/dylanninin/blog", "blog developed with web.py, posted with raw markdown files", 126, "Python"]]], ["User", "Stonesjtu", "https://avatars3.githubusercontent.com/u/4556044?v=4", [["pytorch_memlab", "https://github.com/Stonesjtu/pytorch_memlab", "Profiling and inspecting memory in pytorch", 270, "Python"], ["Pytorch-NCE", "https://github.com/Stonesjtu/Pytorch-NCE", "The Noise Contrastive Estimation for softmax output written in Pytorch", 158, "Python"]]], ["User", "marblexu", "https://avatars1.githubusercontent.com/u/47616581?v=4", [["PythonPlantsVsZombies", "https://github.com/marblexu/PythonPlantsVsZombies", "a simple PlantsVsZombies game", 1106, "Python"]]], ["User", "klb3713", "https://avatars1.githubusercontent.com/u/1397699?v=4", [["sentence2vec", "https://github.com/klb3713/sentence2vec", "Tools for mapping a sentence with arbitrary length to vector space", 669, "Python"]]], ["User", "codemayq", "https://avatars1.githubusercontent.com/u/11713241?v=4", [["chinese_chatbot_corpus", "https://github.com/codemayq/chinese_chatbot_corpus", "\u4e2d\u6587\u516c\u5f00\u804a\u5929\u8bed\u6599\u5e93", 1488, "Python"]]], ["User", "Canjie-Luo", "https://avatars0.githubusercontent.com/u/32130508?v=4", [["MORAN_v2", "https://github.com/Canjie-Luo/MORAN_v2", "MORAN: A Multi-Object Rectified Attention Network for Scene Text Recognition", 462, "Python"]]], ["User", "ChengBinJin", "https://avatars2.githubusercontent.com/u/37034031?v=4", [["V-GAN-tensorflow", "https://github.com/ChengBinJin/V-GAN-tensorflow", "A tensorflow implementation of \"Retinal Vessel Segmentation in Fundoscopic Images with Generative Adversarial Networks\" ", 176, "Python"]]], ["User", "myzhan", "https://avatars2.githubusercontent.com/u/953781?v=4", []], ["User", "cuzz1", "https://avatars0.githubusercontent.com/u/32607900?v=4", []], ["User", "DingGuodong", "https://avatars3.githubusercontent.com/u/5717062?v=4", [["LinuxBashShellScriptForOps", "https://github.com/DingGuodong/LinuxBashShellScriptForOps", "Linux Bash Shell Script and Python Script For Ops and Devops", 226, "Python"]]], ["User", "LUCY78765580", "https://avatars0.githubusercontent.com/u/25961027?v=4", [["Python-web-scraping", "https://github.com/LUCY78765580/Python-web-scraping", "python\u722c\u866b\uff0c\u5305\u542b\u5927\u5c0f\u9879\u76ee", 352, "Python"]]], ["User", "JinnLynn", "https://avatars3.githubusercontent.com/u/1592603?v=4", [["genpac", "https://github.com/JinnLynn/genpac", "PAC/Dnsmasq/Wingy file Generator,  working with gfwlist, support custom rules.", 1921, "Python"], ["alfred-workflows", "https://github.com/JinnLynn/alfred-workflows", "Alfred 2 Workflows", 108, "Python"]]], ["User", "skyduy", "https://avatars0.githubusercontent.com/u/7315313?v=4", [["CNN_keras", "https://github.com/skyduy/CNN_keras", "CNN | Keras/PyTorch | CAPTCHA recognition\uff08\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\u3001Keras/PyTorch\u6846\u67b6\u3001\u9a8c\u8bc1\u7801\u8bc6\u522b\uff09", 239, "Python"]]], ["User", "leeyis", "https://avatars0.githubusercontent.com/u/10876306?v=4", [["jbt_blog", "https://github.com/leeyis/jbt_blog", "\u4e00\u4e2a\u57fa\u4e8eDjango2.0+Python3.6\u7684\u535a\u5ba2/A simple blog based on python3.6 and Django2.0.", 135, "Python"]]], ["User", "gorgiaxx", "https://avatars2.githubusercontent.com/u/9295584?v=4", [["qprotocal", "https://github.com/gorgiaxx/qprotocal", "\u5b89\u5353QQ\u534f\u8baePython\u5e93", 82, "Python"]]], ["User", "kotori2", "https://avatars0.githubusercontent.com/u/17663689?v=4", []], ["User", "xhujoy", "https://avatars1.githubusercontent.com/u/15272722?v=4", [["CycleGAN-tensorflow", "https://github.com/xhujoy/CycleGAN-tensorflow", "Tensorflow implementation for learning an image-to-image translation without input-output pairs. https://arxiv.org/pdf/1703.10593.pdf", 628, "Python"], ["pysc2-agents", "https://github.com/xhujoy/pysc2-agents", "This is a simple implementation of DeepMind's PySC2 RL agents.", 241, "Python"]]], ["User", "ladder1984", "https://avatars2.githubusercontent.com/u/3875374?v=4", [["updateHosts", "https://github.com/ladder1984/updateHosts", "\u81ea\u52a8\u66f4\u65b0hosts", 187, "Python"]]], ["User", "jamiesun", "https://avatars0.githubusercontent.com/u/377938?v=4", [["SublimeEvernote", "https://github.com/jamiesun/SublimeEvernote", "Sublime text 2 Evernote tools ", 280, "Python"]]], ["User", "hitvoice", "https://avatars1.githubusercontent.com/u/13765633?v=4", [["DrQA", "https://github.com/hitvoice/DrQA", "A pytorch implementation of Reading Wikipedia to Answer Open-Domain Questions.", 354, "Python"]]], ["User", "cuanboy", "https://avatars3.githubusercontent.com/u/5178746?v=4", [["ScrapyProject", "https://github.com/cuanboy/ScrapyProject", "\u5f00\u59cbScrapy\u5b9e\u6218\u5982\uff1a\u5b58\u6570\u636e\u5e93\u3001\u4e0b\u8f7d\u6587\u4ef6\u3001\u722c\u4eac\u4e1c\u3001\u6dd8\u5b9d\u3001Anti-Anti-Spider\u2026\u2026", 247, "Python"], ["scrapyTest", "https://github.com/cuanboy/scrapyTest", "SCRAPY\u722c\u866b\u5b9e\u9a8c\uff0c\u4e3b\u8981\u662f\u4e00\u4e9b\u7b80\u5355\u7684\u6817\u5b50\uff0c\u8ba9\u4f60\u5feb\u901f\u4e86\u89e3scrapy\u73a9\u6cd5\uff01", 105, "Python"]]], ["User", "ShiveryMoon", "https://avatars2.githubusercontent.com/u/22512882?v=4", [["Imooc-Algorithm-PythonEdition", "https://github.com/ShiveryMoon/Imooc-Algorithm-PythonEdition", "\u6155\u8bfe\u7f51\u7684\u5b9e\u6218\u8bfe\u7a0b\u201c\u7b97\u6cd5\u4e0e\u6570\u636e\u7ed3\u6784\u201c\u7684\u5168python\u5b9e\u73b0", 363, "Python"]]], ["User", "MeiK2333", "https://avatars3.githubusercontent.com/u/20951666?v=4", []], ["User", "edisonlz", "https://avatars2.githubusercontent.com/u/94183?v=4", [["fastor", "https://github.com/edisonlz/fastor", "Python\u670d\u52a1\u7aef\u5f00\u53d1\u6846\u67b6-\u6781\u6613\u4e0a\u624b\uff0c\u8d85\u51fa\u4f60\u7684\u60f3\u8c61\uff01", 250, "Python"]]], ["User", "whusnoopy", "https://avatars3.githubusercontent.com/u/590666?v=4", [["renrenBackup", "https://github.com/whusnoopy/renrenBackup", "A backup tool for renren.com", 274, "Python"]]], ["User", "hizzgdev", "https://avatars2.githubusercontent.com/u/1690290?v=4", []], ["User", "BillBillBillBill", "https://avatars0.githubusercontent.com/u/5377863?v=4", [["Tickeys-linux", "https://github.com/BillBillBillBill/Tickeys-linux", "Instant audio feedback when typing. For Linux. ", 223, "Python"]]], ["User", "animalize", "https://avatars2.githubusercontent.com/u/11244865?v=4", [["qqwry-python3", "https://github.com/animalize/qqwry-python3", "\u5728\u7eaf\u771fIP\u6570\u636e\u5e93\uff08qqwry.dat\uff09\u67e5\u8be2IP\u5f52\u5c5e\u5730\uff0c for python 3.0+\uff0c\u5df2\u4e0a\u4f20\u81f3pypi\u3002", 120, "Python"]]], ["User", "xsren", "https://avatars0.githubusercontent.com/u/4971925?v=4", [["wx_taobao_fanli", "https://github.com/xsren/wx_taobao_fanli", "\u5fae\u4fe1 \u6dd8\u5b9d \u8fd4\u5229", 407, "Python"]]], ["User", "michael-yin", "https://avatars0.githubusercontent.com/u/4366781?v=4", []], ["User", "lovelyyoshino", "https://avatars2.githubusercontent.com/u/21984530?v=4", [["Shadowsocks-Hosts-or-V2ray", "https://github.com/lovelyyoshino/Shadowsocks-Hosts-or-V2ray", "\u5229\u7528 hosts \u3001 Shadowsocks \uff08\u5f71\u68ad\uff09\u3001V2ray\u79d1\u5b66\u4e0a\u7f51", 611, "Python"]]], ["User", "xuanhan863", "https://avatars0.githubusercontent.com/u/35346?v=4", []], ["User", "shaoguangcheng", "https://avatars2.githubusercontent.com/u/5155578?v=4", []], ["User", "EternalFeather", "https://avatars1.githubusercontent.com/u/22835797?v=4", [["Transformer-in-generating-dialogue", "https://github.com/EternalFeather/Transformer-in-generating-dialogue", "An Implementation of 'Attention is all you need' with Chinese Corpus", 110, "Python"], ["Chatbot-Training-Corpus", "https://github.com/EternalFeather/Chatbot-Training-Corpus", "\u603b\u7ed3\u4e86\u4e00\u4e9b\u53ef\u4ee5\u7528\u4f5c\u804a\u5929\u673a\u5668\u4eba\u8bad\u7ec3\u5b9e\u4f5c\u7684\u6587\u5b57\u8bed\u804a\uff0c\u5305\u542b\u4e2d\u82f1\u6587\u4e0d\u540c\u8bed\u8a00", 103, "Python"]]], ["User", "cforth", "https://avatars3.githubusercontent.com/u/1628077?v=4", [["toys", "https://github.com/cforth/toys", "\u7b97\u6cd5\u4e0e\u6570\u636e\u7ed3\u6784\u7ec3\u4e60\uff08\u4e3b\u8981\u662fPython3\uff09\u3002", 96, "Python"]]], ["User", "DarkSand", "https://avatars1.githubusercontent.com/u/8079289?v=4", [["Sasila", "https://github.com/DarkSand/Sasila", "\u4e00\u4e2a\u7075\u6d3b\u3001\u53cb\u597d\u7684\u722c\u866b\u6846\u67b6", 263, "Python"]]], ["User", "rieuse", "https://avatars1.githubusercontent.com/u/19484501?v=4", [["learnPython", "https://github.com/rieuse/learnPython", "Python\u7684\u57fa\u7840\u7ec3\u4e60\u4ee3\u7801\u4e0e\u5404\u79cd\u722c\u866b\u4ee3\u7801", 394, "Python"]]], ["User", "zhwei", "https://avatars3.githubusercontent.com/u/1446459?v=4", []], ["User", "louis-she", "https://avatars0.githubusercontent.com/u/2050207?v=4", [["center-loss.pytorch", "https://github.com/louis-she/center-loss.pytorch", "center loss for face recognition", 92, "Python"]]], ["User", "zhongyiio", "https://avatars2.githubusercontent.com/u/10026361?v=4", [["crack-geetest", "https://github.com/zhongyiio/crack-geetest", "\u6ed1\u52a8\u9a8c\u8bc1\u7801\u7834\u89e3\u793a\u4f8b\uff0c\u4ec5\u4f9b\u5b66\u4e60\u4f7f\u7528\u3002", 529, "Python"]]], ["User", "chenbjin", "https://avatars2.githubusercontent.com/u/5526772?v=4", []], ["User", "ZhengkunTian", "https://avatars1.githubusercontent.com/u/27281510?v=4", [["Speech-Tranformer-Pytorch", "https://github.com/ZhengkunTian/Speech-Tranformer-Pytorch", "Seq2Seq Speech Recognition with Transformer on Mandarin Chinese", 90, "Python"]]], ["User", "yufeiminds", "https://avatars2.githubusercontent.com/u/9150374?v=4", [["echarts-python", "https://github.com/yufeiminds/echarts-python", "Generate Echarts options with Python.", 378, "Python"]]], ["User", "jachinlin", "https://avatars1.githubusercontent.com/u/18514879?v=4", [["geektime_dl", "https://github.com/jachinlin/geektime_dl", "\u628a\u6781\u5ba2\u65f6\u95f4\u88c5\u8fdb Kindle", 834, "Python"]]], ["User", "chanyipiaomiao", "https://avatars2.githubusercontent.com/u/1332794?v=4", []], ["User", "codeb2cc", "https://avatars2.githubusercontent.com/u/209767?v=4", []], ["User", "caogang", "https://avatars1.githubusercontent.com/u/2537027?v=4", [["wgan-gp", "https://github.com/caogang/wgan-gp", "A pytorch implementation of Paper \"Improved Training of Wasserstein GANs\"", 942, "Python"]]], ["User", "JustinhoCHN", "https://avatars0.githubusercontent.com/u/24873787?v=4", [["SRGAN_Wasserstein", "https://github.com/JustinhoCHN/SRGAN_Wasserstein", "Apply Waseerstein GAN into SRGAN, a deep learning super resolution model", 347, "Python"]]], ["User", "Raytone-D", "https://avatars3.githubusercontent.com/u/13312557?v=4", [["puppet", "https://github.com/Raytone-D/puppet", null, 246, "Python"]]], ["User", "fxy96", "https://avatars1.githubusercontent.com/u/30400802?v=4", [["Stock-Selection-a-Framework", "https://github.com/fxy96/Stock-Selection-a-Framework", "This project demonstrates how to apply machine learning algorithms to distinguish \"good\" stocks from the \"bad\" stocks.", 130, "Python"]]], ["User", "shiyybua", "https://avatars1.githubusercontent.com/u/16335491?v=4", [["NER", "https://github.com/shiyybua/NER", "\u57fa\u4e8etensorflow\u6df1\u5ea6\u5b66\u4e60\u7684\u4e2d\u6587\u7684\u547d\u540d\u5b9e\u4f53\u8bc6\u522b", 864, "Python"]]], ["User", "LcenArthas", "https://avatars2.githubusercontent.com/u/48119351?v=4", [["CVWC2019-Amur-Tiger-Re-ID", "https://github.com/LcenArthas/CVWC2019-Amur-Tiger-Re-ID", ":trophy: Code for 1st Place Soluition in both the Tiger Re-ID in the plain track and Tiger Re-ID in the wild track (CVWC) @ ICCV19 Workshop.", 87, "Python"]]], ["User", "ywcmaike", "https://avatars0.githubusercontent.com/u/14950822?v=4", [["2018--ZJUAI--PyramidBoxDetector", "https://github.com/ywcmaike/2018--ZJUAI--PyramidBoxDetector", "2018 \u4e91\u4ece\u4eba\u5934\u6280\u672f\u51a0\u519b\u5206\u4eab\u65b9\u6848", 83, "Python"]]], ["User", "wususu", "https://avatars1.githubusercontent.com/u/20416173?v=4", []], ["User", "intohole", "https://avatars1.githubusercontent.com/u/2542323?v=4", [["moodstyle", "https://github.com/intohole/moodstyle", "machine learning alg write with pure python \uff0f \u673a\u5668\u5b66\u4e60", 217, "Python"]]], ["User", "apeterswu", "https://avatars1.githubusercontent.com/u/3659280?v=4", [["RL4NMT", "https://github.com/apeterswu/RL4NMT", "Reinforcement Learning for Neural Machine Translation", 147, "Python"]]], ["User", "tyliupku", "https://avatars1.githubusercontent.com/u/33504487?v=4", [["wiki2bio", "https://github.com/tyliupku/wiki2bio", "Code for AAAI2018 paper \"Table-to-text Generation by Structure-aware Seq2seq Learning\"", 95, "Python"]]], ["User", "liberize", "https://avatars0.githubusercontent.com/u/3303478?v=4", [["alfred-dict-workflow", "https://github.com/liberize/alfred-dict-workflow", "A multi-feature, fast and handy alfred dictionary workflow.", 447, "Python"]]], ["User", "SAPikachu", "https://avatars0.githubusercontent.com/u/653824?v=4", []], ["User", "liusongxiang", "https://avatars1.githubusercontent.com/u/23516571?v=4", [["StarGAN-Voice-Conversion", "https://github.com/liusongxiang/StarGAN-Voice-Conversion", "This is a pytorch implementation of the paper: StarGAN-VC: Non-parallel many-to-many voice conversion with star generative adversarial networks  ", 227, "Python"]]], ["User", "mayflaver", "https://avatars3.githubusercontent.com/u/1642040?v=4", [["AsyncTorndb", "https://github.com/mayflaver/AsyncTorndb", "async mysql client for tornado", 158, "Python"]]], ["User", "yuxiaowww", "https://avatars2.githubusercontent.com/u/36853115?v=4", [["BDCI-2018-Supply-Chain-Demand-Forecast", "https://github.com/yuxiaowww/BDCI-2018-Supply-Chain-Demand-Forecast", "\u521d\u8d5bRank1 \u590d\u8d5bRank1 2018 CCF \u5927\u6570\u636e\u4e0e\u8ba1\u7b97\u667a\u80fd\u5927\u8d5b \u4f9b\u5e94\u94fe\u9700\u6c42\u9884\u6d4b Miracccccccle", 114, "Python"]]], ["User", "josonle", "https://avatars1.githubusercontent.com/u/23043019?v=4", [["Coding-Now", "https://github.com/josonle/Coding-Now", "\u5b66\u4e60\u8bb0\u5f55\u7684\u4e00\u4e9b\u7b14\u8bb0\uff0c\u4ee5\u53ca\u6240\u770b\u5f97\u4e00\u4e9b\u7535\u5b50\u4e66eBooks\u3001\u89c6\u9891\u8d44\u6e90\u548c\u5e73\u5e38\u6536\u7eb3\u7684\u4e00\u4e9b\u81ea\u5df1\u8ba4\u4e3a\u6bd4\u8f83\u597d\u7684\u535a\u5ba2\u3001\u7f51\u7ad9\u3001\u5de5\u5177\u3002\u6d89\u53ca\u5927\u6570\u636e\u51e0\u5927\u7ec4\u4ef6\u3001Python\u673a\u5668\u5b66\u4e60\u548c\u6570\u636e\u5206\u6790\u3001Linux\u3001\u64cd\u4f5c\u7cfb\u7edf\u3001\u7b97\u6cd5\u3001\u7f51\u7edc\u7b49", 474, "Python"]]], ["User", "mathslinux", "https://avatars3.githubusercontent.com/u/849489?v=4", []], ["User", "JushuangQiao", "https://avatars2.githubusercontent.com/u/17548905?v=4", [["Python-Offer", "https://github.com/JushuangQiao/Python-Offer", "\u300a\u5251\u6307Offer\u300b\u9762\u8bd5\u9898Python\u5b9e\u73b0", 1071, "Python"]]], ["User", "zer4tul", "https://avatars1.githubusercontent.com/u/26887?v=4", []], ["User", "Zheng222", "https://avatars1.githubusercontent.com/u/24320162?v=4", [["IMDN", "https://github.com/Zheng222/IMDN", "Lightweight Image Super-Resolution with Information Multi-distillation Network (ACM MM 2019)", 95, "Python"]]], ["User", "juzstu", "https://avatars2.githubusercontent.com/u/19447572?v=4", [["TianCheng", "https://github.com/juzstu/TianCheng", "\u751c\u6a59\u91d1\u878d\u521d\u8d5bRank1", 124, "Python"]]], ["User", "yoyzhou", "https://avatars3.githubusercontent.com/u/2084122?v=4", [["weibo_scrapy", "https://github.com/yoyzhou/weibo_scrapy", "WEIBO_SCRAPY is a Multi-Threading SINA WEIBO data extraction Framework in Python.", 154, "Python"]]], ["User", "dawndiy", "https://avatars1.githubusercontent.com/u/1512740?v=4", []], ["User", "Robot-Will", "https://avatars0.githubusercontent.com/u/2779082?v=4", [["Stino", "https://github.com/Robot-Will/Stino", "A Sublime Text Plugin for Arduino", 1566, "Python"]]], ["User", "0x5010", "https://avatars3.githubusercontent.com/u/18439186?v=4", []], ["User", "Ian09", "https://avatars1.githubusercontent.com/u/1275795?v=4", [["CF-NADE", "https://github.com/Ian09/CF-NADE", "A implementation of CF-NADE. Yin Zheng, et. al.  \"A Neural Autoregressive Approach to Collaborative Filtering\", accepted by ICML 2016.", 81, "Python"]]], ["User", "tankle", "https://avatars3.githubusercontent.com/u/1207758?v=4", []], ["User", "luopeixiang", "https://avatars0.githubusercontent.com/u/16150164?v=4", [["named_entity_recognition", "https://github.com/luopeixiang/named_entity_recognition", "\u4e2d\u6587\u547d\u540d\u5b9e\u4f53\u8bc6\u522b\uff08\u5305\u62ec\u591a\u79cd\u6a21\u578b\uff1aHMM\uff0cCRF\uff0cBiLSTM\uff0cBiLSTM+CRF\u7684\u5177\u4f53\u5b9e\u73b0\uff09", 440, "Python"]]], ["User", "wangguanan", "https://avatars2.githubusercontent.com/u/18496599?v=4", [["Pytorch-Person-REID-Baseline-Bag-of-Tricks", "https://github.com/wangguanan/Pytorch-Person-REID-Baseline-Bag-of-Tricks", "A simple and clear re-implementation of the strong person re-identification baseline (bag of tricks).", 80, "Python"]]], ["User", "mitcc", "https://avatars2.githubusercontent.com/u/1176832?v=4", []], ["User", "akgnah", "https://avatars2.githubusercontent.com/u/19429343?v=4", [["oh-my-robot", "https://github.com/akgnah/oh-my-robot", "\u7b80\u660e\u996d\u5426\u673a\u5668\u4eba\u6559\u7a0b\uff08\u4f7f\u7528 Python\uff09", 84, "Python"]]], ["User", "mcdona1d", "https://avatars2.githubusercontent.com/u/7844826?v=4", [["RaspberryWechatPi", "https://github.com/mcdona1d/RaspberryWechatPi", "\u57fa\u4e8e\u6811\u8393\u6d3e\u7684\u667a\u80fd\u5bb6\u5c45\u63a7\u5236\u5e73\u53f0 \u5fae\u4fe1\u670d\u52a1\u7aef \u53d1\u5e03\u7248", 585, "Python"]]], ["User", "xm0625", "https://avatars2.githubusercontent.com/u/8342464?v=4", []], ["User", "bertjiazheng", "https://avatars2.githubusercontent.com/u/8075304?v=4", [["Structured3D", "https://github.com/bertjiazheng/Structured3D", "Structured3D: A Large Photo-realistic Dataset for Structured 3D Modeling", 102, "Python"]]], ["User", "ZhixiuYe", "https://avatars2.githubusercontent.com/u/13991023?v=4", [["HSCRF-pytorch", "https://github.com/ZhixiuYe/HSCRF-pytorch", "ACL 2018: Hybrid semi-Markov CRF for Neural Sequence Labeling (http://aclweb.org/anthology/P18-2038)", 255, "Python"], ["NER-pytorch", "https://github.com/ZhixiuYe/NER-pytorch", "LSTM+CRF NER", 205, "Python"]]], ["User", "SuperChenSSS", "https://avatars2.githubusercontent.com/u/17025439?v=4", []], ["User", "taseikyo", "https://avatars2.githubusercontent.com/u/23132915?v=4", [["PyQt5-Apps", "https://github.com/taseikyo/PyQt5-Apps", ":paperclip:Some useful apps based on PyQt5. | \u8c37\u6b4c\u7ffb\u8bd1\u3001bilibili\u89c6\u9891\u4e0b\u8f7d\u3001\u534e\u79d1\u7535\u8d39\u67e5\u8be2\u3001\u732b\u8033FM\u97f3\u9891\u4e0b\u8f7d\u3001\u65e0\u635f\u97f3\u4e50\u4e0b\u8f7d\u3001\u534e\u79d1\u56fe\u4e66\u9986\u67e5\u8be2\u3001\u8bcd\u4e91\u751f\u6210\u5668etc.", 215, "Python"]]], ["User", "Qinmei", "https://avatars1.githubusercontent.com/u/16222151?v=4", []], ["User", "hx173149", "https://avatars0.githubusercontent.com/u/5306116?v=4", [["C3D-tensorflow", "https://github.com/hx173149/C3D-tensorflow", "C3D is a modified version of BVLC tensorflow to support 3D ConvNets.", 534, "Python"]]], ["User", "polarisZhao", "https://avatars2.githubusercontent.com/u/29157740?v=4", [["PFLD-pytorch", "https://github.com/polarisZhao/PFLD-pytorch", "PFLD pytorch Implementation", 87, "Python"]]], ["User", "ee0703", "https://avatars1.githubusercontent.com/u/8089095?v=4", [["console_video", "https://github.com/ee0703/console_video", "a tool based on ffmpeg that plays video in console!", 102, "Python"]]], ["User", "AlexYangLi", "https://avatars2.githubusercontent.com/u/30424821?v=4", [["ccks2019_el", "https://github.com/AlexYangLi/ccks2019_el", "CCKS 2019 \u4e2d\u6587\u77ed\u6587\u672c\u5b9e\u4f53\u94fe\u6307\u6bd4\u8d5b\u6280\u672f\u521b\u65b0\u5956\u89e3\u51b3\u65b9\u6848", 180, "Python"], ["ABSA_Keras", "https://github.com/AlexYangLi/ABSA_Keras", "Keras Implementation of Aspect based Sentiment Analysis", 100, "Python"]]], ["User", "shellvon", "https://avatars0.githubusercontent.com/u/3349696?v=4", [["smsBomb", "https://github.com/shellvon/smsBomb", "\u77ed\u4fe1\ud83d\udca3\u70b8\ud83d\udc14", 224, "Python"]]], ["User", "wujianguo", "https://avatars1.githubusercontent.com/u/1732474?v=4", []], ["User", "cls1991", "https://avatars1.githubusercontent.com/u/6747182?v=4", [["ng", "https://github.com/cls1991/ng", "Get password of the wifi you're connected, and your current ip address.", 150, "Python"], ["leetcode", "https://github.com/cls1991/leetcode", "leetcode\u5237\u9898", 144, "Python"]]], ["User", "yumaojun03", "https://avatars3.githubusercontent.com/u/8406213?v=4", [["blog-python-app", "https://github.com/yumaojun03/blog-python-app", "\u7f16\u5199\u4e00\u4e2a\u535a\u5ba2 web app\uff0c\u4ece\u4e2d\u5b9e\u73b0\u4e00\u4e2a\u81ea\u5df1\u7684web \u6846\u67b6", 156, "Python"]]], ["User", "lord63", "https://avatars0.githubusercontent.com/u/5268051?v=4", [["py-spin", "https://github.com/lord63/py-spin", "Terminal spinner package for Python. ", 160, "Python"], ["tldr.py", "https://github.com/lord63/tldr.py", "A python client for tldr: simplified and community-driven man pages.", 151, "Python"], ["pyhipku", "https://github.com/lord63/pyhipku", "Encode any IP address as a haiku, funny and lovely. TRY IT NOW: http://pyhipku.lord63.com", 96, "Python"]]], ["User", "leenjewel", "https://avatars1.githubusercontent.com/u/121423?v=4", []], ["User", "kinegratii", "https://avatars0.githubusercontent.com/u/9875406?v=4", [["django-echarts", "https://github.com/kinegratii/django-echarts", "A django app for Echarts integration using pyecharts library as chart builder.", 116, "Python"]]], ["User", "ictxiangxin", "https://avatars2.githubusercontent.com/u/3955842?v=4", []], ["User", "XierHacker", "https://avatars2.githubusercontent.com/u/15364826?v=4", [["LearningTensorFlow", "https://github.com/XierHacker/LearningTensorFlow", "Tensorflow 2.0 Tutorials", 109, "Python"]]], ["User", "SPuerBRead", "https://avatars0.githubusercontent.com/u/18071202?v=4", [["HTMLSimilarity", "https://github.com/SPuerBRead/HTMLSimilarity", "\u7f51\u9875\u76f8\u4f3c\u5ea6\u5224\u65ad\uff1a\u6839\u636e\u7f51\u9875\u7ed3\u6784\u5224\u65ad\u9875\u9762\u76f8\u4f3c\u6027 \uff0c\u53ef\u7528\u4e8e\u76f8\u4f3c\u5ea6\u8ba1\u7b97\u3001\u8d8a\u6743\u68c0\u6d4b\u7b49(Determine page similarity based on HTML page structure)", 124, "Python"]]], ["User", "sinall", "https://avatars1.githubusercontent.com/u/1246382?v=4", [["StrategyEase-Python-SDK", "https://github.com/sinall/StrategyEase-Python-SDK", "\u7b56\u7565\u6613\uff08StrategyEase\uff09Python SDK\uff0c\u7b56\u7565\u81ea\u52a8\u5316\u4ea4\u6613 API \u53ca\u91cf\u5316\u5e73\u53f0\u3002", 633, "Python"]]], ["User", "bukun", "https://avatars2.githubusercontent.com/u/6925146?v=4", [["TorCMS", "https://github.com/bukun/TorCMS", "Flexible, extensible web CMS framework built on Tornado.", 183, "Python"]]], ["User", "dev-techmoe", "https://avatars0.githubusercontent.com/u/7919562?v=4", [["python-dcdownloader", "https://github.com/dev-techmoe/python-dcdownloader", "\u7531Python\u7f16\u5199\u7684\u5168\u5f02\u6b65\u5b9e\u73b0\u7684\u52a8\u6f2b\u4e4b\u5bb6(dmzj)\u6f2b\u753b\u6279\u91cf\u4e0b\u8f7d\u5668\uff08\u722c\u866b\uff09", 129, "Python"]]], ["User", "DuinoDu", "https://avatars3.githubusercontent.com/u/6895453?v=4", [["mtcnn", "https://github.com/DuinoDu/mtcnn", "mtcnn in python", 275, "Python"]]], ["User", "ookcode", "https://avatars0.githubusercontent.com/u/3356083?v=4", []], ["User", "NoisyWinds", "https://avatars1.githubusercontent.com/u/27388038?v=4", [["puzzle", "https://github.com/NoisyWinds/puzzle", "\ud83c\udf37 \u4f7f\u75285000\u5f20\u4e8c\u6b21\u5143\u56fe\u7247\u751f\u6210\u6d77\u62a5\u5927\u56fe\uff0c\u8ba1\u7b97\u989c\u8272\u76f8\u4f3c\u5ea6\u3002Make a poster with 5000 pictures\uff0cPython spider and Color similarity measure ", 276, "Python"]]], ["User", "CavinCao", "https://avatars0.githubusercontent.com/u/26600896?v=4", []], ["User", "wangheda", "https://avatars2.githubusercontent.com/u/1303182?v=4", [["youtube-8m", "https://github.com/wangheda/youtube-8m", "The 2nd place Solution to the Youtube-8M Video Understanding Challenge by Team Monkeytyping (based on tensorflow)", 166, "Python"]]], ["User", "guoweilong", "https://avatars0.githubusercontent.com/u/2791560?v=4", []], ["User", "shishujuan", "https://avatars2.githubusercontent.com/u/1697213?v=4", []], ["User", "knitmesh", "https://avatars2.githubusercontent.com/u/15851881?v=4", [["servos-framework", "https://github.com/knitmesh/servos-framework", "Adopt decentralized development and unified management Develop on a service basis Each service can be started individually or multiple services can be started at the same time Configuration file management specifies which services take effect and deployment is flexible", 130, "Python"]]], ["User", "harbby", "https://avatars0.githubusercontent.com/u/19815755?v=4", []], ["User", "ZYunH", "https://avatars0.githubusercontent.com/u/18065074?v=4", [["zmail", "https://github.com/ZYunH/zmail", "Zmail makes it easier to send and retrieve emails in python3", 249, "Python"]]], ["User", "YuxianMeng", "https://avatars2.githubusercontent.com/u/11677047?v=4", [["Matrix-Capsules-pytorch", "https://github.com/YuxianMeng/Matrix-Capsules-pytorch", "A Pytorch implementation of \"Matrix Capsules with EM routing\"", 193, "Python"]]], ["User", "shunliz", "https://avatars3.githubusercontent.com/u/4516515?v=4", [["Machine-Learning", "https://github.com/shunliz/Machine-Learning", "\u673a\u5668\u5b66\u4e60\u539f\u7406", 701, "Python"]]], ["User", "ProHiryu", "https://avatars1.githubusercontent.com/u/20737591?v=4", [["bert-chinese-ner", "https://github.com/ProHiryu/bert-chinese-ner", "\u4f7f\u7528\u9884\u8bad\u7ec3\u8bed\u8a00\u6a21\u578bBERT\u505a\u4e2d\u6587NER", 599, "Python"], ["albert-chinese-ner", "https://github.com/ProHiryu/albert-chinese-ner", "\u4f7f\u7528\u9884\u8bad\u7ec3\u8bed\u8a00\u6a21\u578bALBERT\u505a\u4e2d\u6587NER", 115, "Python"]]], ["User", "faycheng", "https://avatars3.githubusercontent.com/u/10752787?v=4", []], ["User", "chenditc", "https://avatars0.githubusercontent.com/u/3244845?v=4", []], ["User", "Wfzsec", "https://avatars0.githubusercontent.com/u/24896161?v=4", [["awd_attack_framework", "https://github.com/Wfzsec/awd_attack_framework", "awd\u653b\u9632\u5e38\u7528\u811a\u672c+\u4e0d\u6b7b\u9a6c+crontab+\u9632\u5fa1\u65b9\u6cd5", 134, "Python"]]], ["User", "digglife", "https://avatars2.githubusercontent.com/u/1468378?v=4", [["cnbankcard", "https://github.com/digglife/cnbankcard", ":bank: \u7531\u94f6\u884c\u5361\u5361\u53f7\u89e3\u6790\u51fa\u53d1\u5361\u884c\u548c\u5361\u522b\uff0c\u9002\u7528\u4e8e\u4e2d\u56fd\u56fd\u5185\u591a\u6570\u94f6\u884c\uff0c\u8fd4\u56deJSON\u6570\u636e\u3002", 777, "Python"]]], ["User", "yanzhou", "https://avatars2.githubusercontent.com/u/1528461?v=4", [["CnkiSpider", "https://github.com/yanzhou/CnkiSpider", "\u4e2d\u56fd\u77e5\u7f51\u722c\u866b", 333, "Python"]]], ["User", "meibenjin", "https://avatars3.githubusercontent.com/u/4006547?v=4", [["GoogleSearchCrawler", "https://github.com/meibenjin/GoogleSearchCrawler", "a tool for crawl Google search results", 297, "Python"]]], ["User", "hschen0712", "https://avatars2.githubusercontent.com/u/11927658?v=4", []], ["User", "ttimasdf", "https://avatars2.githubusercontent.com/u/2762704?v=4", []], ["User", "lelan-li", "https://avatars1.githubusercontent.com/u/39299017?v=4", [["SSAH", "https://github.com/lelan-li/SSAH", "Self-Supervised Adversarial Hashing Networks for Cross-Modal Retrieval(CVPR2018)", 114, "Python"]]], ["User", "holyhao", "https://avatars1.githubusercontent.com/u/16329474?v=4", [["Baidu-Dogs", "https://github.com/holyhao/Baidu-Dogs", "Baidu competition for classifying dogs. More information is provided at http://js.baidu.com", 100, "Python"]]], ["User", "taogeT", "https://avatars1.githubusercontent.com/u/6917395?v=4", [["livetv_mining", "https://github.com/taogeT/livetv_mining", "\u76f4\u64ad\u7f51\u7ad9\u6570\u636e\u91c7\u96c6", 189, "Python"]]], ["User", "deepgully", "https://avatars0.githubusercontent.com/u/481894?v=4", [["me", "https://github.com/deepgully/me", "Personal website powered by Flask, supports GAE, SAE and BAE. ", 280, "Python"]]], ["User", "yoki123", "https://avatars3.githubusercontent.com/u/2094104?v=4", []], ["User", "riba2534", "https://avatars3.githubusercontent.com/u/26398978?v=4", []], ["User", "laserwave", "https://avatars1.githubusercontent.com/u/18577799?v=4", []], ["User", "Epiphqny", "https://avatars3.githubusercontent.com/u/16319629?v=4", [["SOLO", "https://github.com/Epiphqny/SOLO", "Segmenting Objects by Locations", 109, "Python"]]], ["User", "xiadingZ", "https://avatars1.githubusercontent.com/u/16729275?v=4", [["video-caption.pytorch", "https://github.com/xiadingZ/video-caption.pytorch", "pytorch implementation of video captioning", 256, "Python"]]], ["User", "hldh214", "https://avatars2.githubusercontent.com/u/5501843?v=4", []], ["User", "dbbbit", "https://avatars1.githubusercontent.com/u/8575796?v=4", [["ninja-search", "https://github.com/dbbbit/ninja-search", "[Deactived] search engine for v2ex ", 142, "Python"]]], ["User", "KimSoybean", "https://avatars3.githubusercontent.com/u/24352057?v=4", [["ScratchDet", "https://github.com/KimSoybean/ScratchDet", "The code and models for paper: \"ScratchDet: Exploring to Train Single-Shot Object Detectors from Scratch\"", 214, "Python"]]], ["User", "monsterxx03", "https://avatars0.githubusercontent.com/u/813489?v=4", []], ["User", "ly0", "https://avatars2.githubusercontent.com/u/1551736?v=4", [["baidupcsapi", "https://github.com/ly0/baidupcsapi", "\u767e\u5ea6\u7f51\u76d8api", 980, "Python"]]], ["User", "tennc", "https://avatars3.githubusercontent.com/u/670357?v=4", []], ["User", "hanc00l", "https://avatars3.githubusercontent.com/u/12759172?v=4", [["weblogic_unserialize_exploit", "https://github.com/hanc00l/weblogic_unserialize_exploit", "java unserialize vul for weblogic exploit", 166, "Python"], ["some_pocsuite", "https://github.com/hanc00l/some_pocsuite", "\u7528\u4e8e\u6f0f\u6d1e\u6392\u67e5\u7684pocsuite3\u9a8c\u8bc1POC\u4ee3\u7801", 119, "Python"], ["captcha-python-test", "https://github.com/hanc00l/captcha-python-test", "\u5b66\u4e60\u9a8c\u8bc1\u7801\u8bc6\u522b\u7684\u76f8\u5173\u6280\u672f\uff0c\u5305\u62ecopencv\u3001tesseract\u3001\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\uff08kNN\u548cSVM\uff09\u7b49\uff0c\u5c06\u539f\u4f5c\u8005\u7684\u7b97\u6cd5\u6539\u4e3apython", 109, "Python"]]], ["User", "Leezj9671", "https://avatars3.githubusercontent.com/u/11917826?v=4", [["socialdb_vue_flask", "https://github.com/Leezj9671/socialdb_vue_flask", "\u4e00\u4e2a\u5c0f\u578b\u7684\u8f83\u4e3a\u7b80\u964b\u7684\u793e\u5de5\u5e93\u67e5\u8be2\u7cfb\u7edf,\u4f7f\u7528Vue.js+Flask+MongoDB.\u53ef\u752852g, \u672c\u4eba\u4e0d\u63d0\u4f9b\u4efb\u4f55\u793e\u5de5\u5e93\u8d44\u6e90. A tiny social engineering database system, including backend and frontend. ", 134, "Python"]]], ["User", "tclh123", "https://avatars3.githubusercontent.com/u/1311043?v=4", []], ["User", "liuliqiang", "https://avatars1.githubusercontent.com/u/9395418?v=4", [["redisbeat", "https://github.com/liuliqiang/redisbeat", "celery redis scheduler, dynamic add/modify/delete task from celery.", 116, "Python"]]], ["User", "lxj616", "https://avatars0.githubusercontent.com/u/12285589?v=4", []], ["User", "v1cker", "https://avatars0.githubusercontent.com/u/10337420?v=4", [["src_edu", "https://github.com/v1cker/src_edu", "\u4e3a\u5404\u4f4d\u51fa\u8272\u7684\u6e17\u900f\u5de5\u7a0b\u5e08\u63d0\u4f9b\u653b\u51fb\u76ee\u6807\u3002", 97, "Python"]]], ["User", "T3st0r-Git", "https://avatars3.githubusercontent.com/u/20334557?v=4", [["HackMySQL", "https://github.com/T3st0r-Git/HackMySQL", "Using To MySQL Elevate Privileges.", 132, "Python"]]], ["User", "Edward1Chou", "https://avatars1.githubusercontent.com/u/20023785?v=4", [["Textclassification", "https://github.com/Edward1Chou/Textclassification", "several methods for text classification", 143, "Python"]]], ["User", "v55448330", "https://avatars3.githubusercontent.com/u/13160941?v=4", [["lazy-balancer", "https://github.com/v55448330/lazy-balancer", "nginx for balancer web ui", 422, "Python"]]], ["User", "sintrb", "https://avatars1.githubusercontent.com/u/2967718?v=4", []], ["User", "darkTianTian", "https://avatars3.githubusercontent.com/u/14818635?v=4", [["sword-for-offer", "https://github.com/darkTianTian/sword-for-offer", "\u4f7f\u7528Python3\u7528\u4f18\u96c5\u7684\u65b9\u5f0f\u5b9e\u73b0\u300a\u5251\u6307Offer\u300b\u4e2d\u7684\u9898\u76ee\u3002", 157, "Python"]]]]}